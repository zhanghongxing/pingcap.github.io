<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs-cns on PingCAP Site</title>
    <link>https://pingcap.com/docs-cn/</link>
    <description>Recent content in Docs-cns on PingCAP Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://pingcap.com/docs-cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://pingcap.com/docs-cn/README/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/README/</guid>
      <description>TiDB 中文技术文档 目录  关于 TiDB  TiDB 简介 TiDB 整体架构 TiDB 核心特性  TiDB 快速入门  快速入门指南 SQL 基本操作  TiDB 用户文档  TiDB 数据库管理 TiDB 服务 TiDB 进程启动参数 TiDB 数据目录 TiDB 系统数据库 TiDB 系统变量 TiDB 专用系统变量和语法 TiDB 服务器日志文件 TiDB 访问权限管理 TiDB 用户账户管理 使用加密连接 SQL 优化 理解 TiDB 执行计划 统计信息 语言结构 字面值 数据库、表、索引、列和别名 关键字和保留字 用户变量 表达式语法 注释语法 字符集和时区 字符集支持 字符集配置 时区 数据类型 数值类型 日期和时间类型 字符串类型 JSON 数据类型 枚举类型 集合类型 数据类型默认值 函数和操作符 函数和操作符概述 表达式求值的类型转换 操作符 控制流程函数 字符串函数 数值函数与操作符 日期和时间函数 位函数和操作符 Cast 函数和操作符 加密和压缩函数 信息函数 JSON 函数 GROUP BY 聚合函数 其他函数 精度数学 SQL 语句语法 数据定义语句 (DDL) 数据操作语句 (DML) 事务语句 数据库管理语句 Prepared SQL 语句语法 实用工具语句 TiDB SQL 语法图 JSON 支持 Connectors 和 API TiDB 事务隔离级别 错误码与故障诊断 与 MySQL 兼容性对比 TiDB 内存控制 慢查询日志 高级功能 历史数据回溯 垃圾回收 (GC)  TiDB 运维文档  软硬件环境需求 部署集群 Ansible 部署方案（强烈推荐） 离线 Ansible 部署方案 Docker 部署方案 Docker Compose 部署方案 跨机房部署方案 配置集群 参数解释 TiDB 配置项解释 使用 Ansible 变更组件配置 开启 TLS 验证 生成自签名证书 监控集群 整体监控框架概述 重要监控指标详解 组件状态 API &amp;amp; 监控 扩容缩容 集群扩容缩容方案 使用 Ansible 扩容缩容 升级 升级组件版本 TiDB 2.</description>
    </item>
    
    <item>
      <title>Bit-value Literals</title>
      <link>https://pingcap.com/docs-cn/sql/literal-value-bit-value/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/literal-value-bit-value/</guid>
      <description>Bit-value Literals 位值字面值用 b 或者 0b 做前缀，后接以 0 跟 1 组成的二进制数字。其中 0b 是区分大小写的，0B 是会报错的。
合法的 Bit-value：
 b&amp;rsquo;01&amp;rsquo; B&amp;rsquo;01&amp;rsquo; 0b01  非法的 Bit-value：
 b&amp;rsquo;2&amp;rsquo; (2 不是二进制数值, 必须为 0 或 1) 0B01 (0B 必须是小写 0b)  默认情况，位值字面值是一个二进制字符串。
Bit-value 是作为二进制返回的，所以输出到 MySQL Client 可能会显示不出来，如果要转换为可打印的字符，可以使用内建函数 BIN() 或者 HEX()：
CREATE TABLE t (b BIT(8)); INSERT INTO t SET b = b&amp;#39;00010011&amp;#39;; INSERT INTO t SET b = b&amp;#39;1110&amp;#39;; INSERT INTO t SET b = b&amp;#39;100101&amp;#39;; mysql&amp;gt; SELECT b+0, BIN(b), HEX(b) FROM t; +------+--------+--------+ | b+0 | BIN(b) | HEX(b) | +------+--------+--------+ | 19 | 10011 | 13 | | 14 | 1110 | E | | 37 | 100101 | 25 | +------+--------+--------+ 3 rows in set (0.</description>
    </item>
    
    <item>
      <title>Boolean Literals</title>
      <link>https://pingcap.com/docs-cn/sql/literal-value-boolean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/literal-value-boolean/</guid>
      <description> Boolean Literals 常量 TRUE 和 FALSE 等于 1 和 0，它是大小写不敏感的。
mysql&amp;gt; SELECT TRUE, true, tRuE, FALSE, FaLsE, false; +------+------+------+-------+-------+-------+ | TRUE | true | tRuE | FALSE | FaLsE | false | +------+------+------+-------+-------+-------+ | 1 | 1 | 1 | 0 | 0 | 0 | +------+------+------+-------+-------+-------+ 1 row in set (0.00 sec)</description>
    </item>
    
    <item>
      <title>Cast 函数和操作符</title>
      <link>https://pingcap.com/docs-cn/sql/cast-functions-and-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/cast-functions-and-operators/</guid>
      <description> Cast 函数和操作符 Cast 函数和操作符用于将某种数据类型的值转换为另一种数据类型。TiDB 中该函数和操作符的使用方法与 MySQL基本一致，详情参见: Cast Functions and Operators.
Cast 函数和操作符表    函数和操作符名 功能描述     BINARY 将一个字符串转换成一个二进制字符串   CAST() 将一个值转换成一个确定类型   CONVERT() 将一个值转换成一个确定类型    </description>
    </item>
    
    <item>
      <title>Date 和 Time 字面值</title>
      <link>https://pingcap.com/docs-cn/sql/literal-value-date-and-time-literals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/literal-value-date-and-time-literals/</guid>
      <description>Date and Time Literals Date 跟 Time 字面值有几种格式，例如用字符串表示，或者直接用数字表示。在 TiDB 里面，当 TiDB 期望一个 Date 的时候，它会把 &#39;2017-08-24&#39;， &#39;20170824&#39;，20170824 当做是 Date。
TiDB 的 Date 值有以下几种格式：
 &#39;YYYY-MM-DD&#39; 或者 &#39;YY-MM-DD&#39;，这里的 - 分隔符并不是严格的，可以是任意的标点符号。比如 &#39;2017-08-24&#39;，&#39;2017&amp;amp;08&amp;amp;24&#39;， &#39;2012@12^31&#39; 都是一样的。唯一需要特别对待的是 &amp;lsquo;.&amp;rsquo; 号，它被当做是小数点，用于分隔整数和小数部分。 Date 和 Time 部分可以被 &amp;rsquo;T&amp;rsquo; 分隔，它的作用跟空格符是一样的，例如 2017-8-24 10:42:00 跟 2017-8-24T10:42:00 是一样的。 &#39;YYYYMMDDHHMMSS&#39; 或者 &#39;YYMMDDHHMMSS&#39;，例如 &#39;20170824104520&#39; 和 &#39;170824104520&#39; 被当做是 &#39;2017-08-24 10:45:20&#39;，但是如果你提供了一个超过范围的值，例如&#39;170824304520&#39;，那这就不是一个有效的 Date 字面值。 YYYYMMDDHHMMSS 或者 YYMMDDHHMMSS 注意这里没有单引号或者双引号，是一个数字。例如 20170824104520表示为 &#39;2017-08-24 10:45:20&#39;。  DATETIME 或者 TIMESTAMP 值可以接一个小数部分，用来表示微秒（精度最多到小数点后 6 位），用小数点 .</description>
    </item>
    
    <item>
      <title>GROUP BY 聚合函数</title>
      <link>https://pingcap.com/docs-cn/sql/aggregate-group-by-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/aggregate-group-by-functions/</guid>
      <description>GROUP BY 聚合函数 GROUP BY 聚合函数功能描述 本节介绍 TiDB 中支持的 MySQL GROUP BY 聚合函数。
   函数名 功能描述     COUNT() 返回检索到的行的数目   COUNT(DISTINCT) 返回不同值的数目   SUM() 返回和   AVG() 返回平均值   MAX() 返回最大值   MIN() 返回最小值   GROUP_CONCAT() 返回连接的字符串     Note:
 除非另有说明，否则组函数默认忽略 NULL 值。 如果在不包含 GROUP BY 子句的语句中使用组函数，则相当于对所有行进行分组。详情参阅 TiDB 中的 GROUP BY。   GROUP BY 修饰符 TiDB 目前不支持任何 GROUP BY 修饰符，将来会提供支持，详情参阅 #4250。</description>
    </item>
    
    <item>
      <title>JSON 函数及 Generated Column</title>
      <link>https://pingcap.com/docs-cn/sql/json-functions-generated-column/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/json-functions-generated-column/</guid>
      <description>JSON 函数及 Generated Column 概述 为了在功能上兼容 MySQL 5.7 及以上，同时更好地支持文档类型存储，我们在最新版本的 TiDB 中加入了 JSON 的支持。TiDB 所支持的文档是指以 JSON 为编码类型的键值对的组合。用户可以在 TiDB 的表中使用 JSON 类型的字段，同时以生成列（generated column）的方式为 JSON 文档内部的字段建立索引。基于此，用户可以很灵活地处理那些 schema 不确定的业务，同时不必受限于传统文档数据库糟糕的读性能及匮乏的事务支持。
JSON 功能介绍 TiDB 的 JSON 主要参考了 MySQL 5.7 的用户接口。例如，可以创建一个表，包含一个 JSON 字段来存储那些复杂的信息：
CREATE TABLE person ( id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255) NOT NULL, address_info JSON ); 当我们向表中插入数据时，便可以这样处理那些模式不确定的数据了：
INSERT INTO person (name, address_info) VALUES (&amp;#34;John&amp;#34;, &amp;#39;{&amp;#34;city&amp;#34;: &amp;#34;Beijing&amp;#34;}&amp;#39;); 就这么简单！直接在 JSON 字段对应的位置上，放一个合法的 JSON 字符串，就可以向表中插入 JSON 了。TiDB 会解析这个文本，然后以一种更加紧凑、易于访问的二进制形式来保存。</description>
    </item>
    
    <item>
      <title>JSON 相关的函数和语法糖</title>
      <link>https://pingcap.com/docs-cn/sql/json-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/json-functions/</guid>
      <description> JSON 相关的函数和语法糖    函数或语法糖 功能描述     JSON_EXTRACT(json_doc, path[, path] &amp;hellip;) 从 JSON 文档中解出某一路径对应的子文档   JSON_UNQUOTE(json_val) 去掉 JSON 文档外面的引号   JSON_TYPE(json_val) 检查某 JSON 文档内部内容的类型   JSON_SET(json_doc, path, val[, path, val] &amp;hellip;) 在 JSON 文档中为某一路径设置子文档   JSON_INSERT(json_doc, path, val[, path, val] &amp;hellip;) 在 JSON 文档中在某一路径下插入子文档   JSON_REPLACE(json_doc, path, val[, path, val] &amp;hellip;) 替换 JSON 文档中的某一路径下的子文档   JSON_REMOVE(json_doc, path[, path] &amp;hellip;) 移除 JSON 文档中某一路径下的子文档   JSON_MERGE(json_doc, json_doc[, json_doc] &amp;hellip;) 将多个 JSON 文档合并成一个文档，其类型为数组   JSON_OBJECT(key, val[, key, val] &amp;hellip;) 根据一系列 K/V 对创建一个 JSON 文档   JSON_ARRAY([val[, val] &amp;hellip;]) 根据一系列元素创建一个 JSON 文档   -&amp;gt; JSON_EXTRACT(doc, path_literal) 的语法糖   -&amp;gt;&amp;gt; JSON_UNQUOTE(JSONJSON_EXTRACT(doc, path_literal)) 的语法糖    </description>
    </item>
    
    <item>
      <title>Loader 使用文档</title>
      <link>https://pingcap.com/docs-cn/tools/loader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tools/loader/</guid>
      <description>Loader 使用文档 Loader 简介 Loader 是由 PingCAP 开发的数据导入工具，用于向 TiDB 中导入数据。
Binary 下载
为什么我们要做这个工具 当数据量比较大的时候，如果用 mysqldump 这样的工具迁移数据会比较慢。我们尝试了 mydumper/myloader 套件，能够多线程导出和导入数据。在使用过程中，mydumper 问题不大，但是 myloader 由于缺乏出错重试、断点续传这样的功能，使用起来很不方便。所以我们开发了 loader，能够读取 mydumper 的输出数据文件，通过 MySQL protocol 向 TiDB/MySQL 中导入数据。
Loader 有哪些优点  多线程导入
 支持表级别的并发导入，分散写入热点
 支持对单个大表并发导入，分散写入热点
 支持 mydumper 数据格式
 出错重试
 断点续导
 通过 system variable 优化 TiDB 导入数据速度
  使用方法 注意事项 请勿使用 loader 导入 MySQL 实例中 mysql 系统数据库到下游 TiDB。
如果 mydumper 使用 -m 参数，会导出不带表结构的数据，这时 loader 无法导入数据。</description>
    </item>
    
    <item>
      <title>NULL Values</title>
      <link>https://pingcap.com/docs-cn/sql/literal-value-null-values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/literal-value-null-values/</guid>
      <description>NULL Values NULL 代表数据为空，它是大小写不敏感的，与 \N(大小写敏感) 同义。
需要注意的是 NULL 跟 0 并不一样，跟空字符串 &#39;&#39; 也不一样。</description>
    </item>
    
    <item>
      <title>Numeric Literals</title>
      <link>https://pingcap.com/docs-cn/sql/literal-value-numeric-literals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/literal-value-numeric-literals/</guid>
      <description>Numeric Literals 数值字面值包括 integer 跟 Decimal 类型跟浮点数字面值。
integer 可以包括 . 作为小数点分隔，数字前可以有 - 或者 + 来表示正数或者负数。
精确数值字面值可以表示为如下格式：1, .2, 3.4, -5, -6.78, +9.10.
科学记数法也是被允许的，表示为如下格式：1.2E3, 1.2E-3, -1.2E3, -1.2E-3。
更多细节</description>
    </item>
    
    <item>
      <title>PD Control 使用说明</title>
      <link>https://pingcap.com/docs-cn/tools/pd-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tools/pd-control/</guid>
      <description>PD Control 使用说明 PD Control 是 PD 的命令行工具，用于获取集群状态信息和调整集群。
源码编译  Go Version 1.9 以上 在 PD 项目根目录使用 make 命令进行编译，生成 bin/pd-ctl  简单例子 单命令模式：
./pd-ctl store -d -u http://127.0.0.1:2379 交互模式：
./pd-ctl -u http://127.0.0.1:2379 使用环境变量：
export PD_ADDR=http://127.0.0.1:2379 ./pd-ctl 使用TLS加密：
./pd-ctl -u https://127.0.0.1:2379 --cacert=&amp;#34;path/to/ca&amp;#34; --cert=&amp;#34;path/to/cert&amp;#34; --key=&amp;#34;path/to/key&amp;#34; 命令行参数(flags) --pd,-u  指定 PD 的地址 默认地址: http://127.0.0.1:2379 环境变量: PD_ADDR  --detach,-d  使用单命令行模式(不进入 readline) 默认值: false  &amp;ndash;cacert  指定 PEM 格式的受信任 CA 的证书文件路径 默认值: &amp;ldquo;&amp;rdquo;  &amp;ndash;cert  指定 PEM 格式的 SSL 证书文件路径 默认值: &amp;ldquo;&amp;rdquo;  &amp;ndash;key  指定 PEM 格式的 SSL 证书密钥文件路径，即 --cert 所指定的证书的私钥 默认值: &amp;ldquo;&amp;rdquo;  &amp;ndash;version,-V  打印版本信息并退出 默认值: false  命令(command) cluster 用于显示集群基本信息。</description>
    </item>
    
    <item>
      <title>PD Recover 使用文档</title>
      <link>https://pingcap.com/docs-cn/tools/pd-recover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tools/pd-recover/</guid>
      <description> PD Recover 使用文档 PD Recover 是对 PD 进行灾难性恢复的工具，用于恢复无法正常启动或服务的 PD 集群。
源码编译  Go Version 1.9 以上 在 PD 项目根目录使用 make 命令进行编译，生成 bin/pd-recover  使用方法 参数说明 -alloc-id uint 指定比原集群已分配过的 ID 更大的数 -cacert string 指定 PEM 格式的受信任 CA 的证书文件路径 -cert string 指定 PEM 格式的 SSL 证书文件路径 -key string 指定 PEM 格式的 SSL 证书密钥文件路径，即 `--cert` 所指定的证书的私钥 -cluster-id uint 指定原集群的 cluster ID -endpoints string 指定 PD 的地址 (default &amp;#34;http://127.0.0.1:2379&amp;#34;) 恢复流程  从当前集群中找到集群的 Cluster ID 和 Alloc ID。一般在 PD，TiKV 或 TiDB 的日志中都可以获取 Cluster ID。已经分配过的 Alloc ID 可以从 PD 日志获得。另外也可以从 PD 的监控面板的 Metadata Information 监控项中获得。在指定 alloc-id 时需指定一个比当前最大的 Alloc ID 更大的值。如果没有途径获取 Alloc ID，可以根据集群中的 Region，Store 数预估一个较大的数，一般可取高几个数量级的数。 停止整个集群，清空 PD 数据目录，重启 PD 集群。 使用 PD recover 进行恢复，注意指定正确的 cluster-id 和合适的 alloc-id。 提示恢复成功后，重启整个集群。  </description>
    </item>
    
    <item>
      <title>Prepared SQL 语句语法</title>
      <link>https://pingcap.com/docs-cn/sql/prepare/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/prepare/</guid>
      <description>Prepared SQL 语句语法 TiDB 支持服务器端的 Prepared 语句，这种方式可以降低语句解析以及查询优化的开销，提高执行效率。有两种方式可以使用 Prepared 语句：
通过应用程序 大多数 MySQL Driver 都支持 Prepared 语句，比如 MySQL Connector/C。这种方式可以通过 Binary 协议直接调用 Prepared 语句 API。
通过 SQL 语句 通过 PREPARE，EXECUTE 以及 DEALLOCATE PREPARE 这三个语句也可以实现 Prepared 语句，这种方式不如第一种方式效率高，但是不需要写程序即可使用。
PREPARE 语句 PREPARE stmt_name FROM preparable_stmt PREPARE 语句对 preparable_stmt 做预处理（语法解析、语义检查、查询优化）并将其处理结果命名为 stmt_name，后面的操作可以通过 stmt_name 来引用。处理好的语句可以通过 EXECUTE 语句执行或者是通过 DEALLOCATE PREPARE 语句释放。
EXECUTE 语句 EXECUTE stmt_name [USING @var_name [, @var_name] ...] EXECUTE 语句执行名字为 stmt_name 的预处理语句。如果预处理语句中有参数，则可以通过 USING 子句中的 User Variable 列表给参数赋值。</description>
    </item>
    
    <item>
      <title>Schema Object Names</title>
      <link>https://pingcap.com/docs-cn/sql/schema-object-names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/schema-object-names/</guid>
      <description>Schema Object Names 在 TiDB 中，包括 database，table，index，column，alias 等等都被认为是 identifier (标识符，之后阐述用英文).
在 TiDB 中，identifier可以被反引号 (`) 包裹，为了阐述方便，我们叫这种情况为 被引用。identifier 也可以不被 ` 包裹。 但是如果一个 identifier 存在一个特殊符号或者是一个保留关键字，那么你必须要 引用 它。
mysql&amp;gt; SELECT * FROM `table` WHERE `table`.id = 20; 如果ANSI_QUOTES sql mode 被设置了，那么我们认为被双引号 &amp;quot; 包裹的字符串为 identifier。
mysql&amp;gt; CREATE TABLE &amp;#34;test&amp;#34; (a varchar(10)); ERROR 1105 (HY000): line 0 column 19 near &amp;#34; (a varchar(10))&amp;#34; (total length 35) mysql&amp;gt; SET SESSION sql_mode=&amp;#39;ANSI_QUOTES&amp;#39;; Query OK, 0 rows affected (0.</description>
    </item>
    
    <item>
      <title>String Literals</title>
      <link>https://pingcap.com/docs-cn/sql/literal-value-string-literals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/literal-value-string-literals/</guid>
      <description>String Literals String Literals 是一个 bytes 或者 characters 的序列，两端被单引号 &#39; 或者双引号 &amp;quot; 包围，例如：
&amp;#39;example string&amp;#39; &amp;#34;example string&amp;#34; 如果字符串是连续的，会被合并为一个独立的 string。以下表示是一样的：
&amp;#39;a string&amp;#39; &amp;#39;a&amp;#39; &amp;#39; &amp;#39; &amp;#39;string&amp;#39; &amp;#34;a&amp;#34; &amp;#39; &amp;#39; &amp;#34;string&amp;#34; 如果 ANSI_QUOTES SQL MODE 开启了，那么只有单引号内的会被认为是 String Literals，对于双引号内的字符串，会被认为是一个 identifier。
binary string 是一串 bytes 组成的字符串，每一个 binary string 有一个叫做 binary 的 character set 和 collation。一个非二进制的字符串是一个由字符组成的字符串，它有除 binary 外的 character set和与之兼容的 collation。
对于两种字符串类型，比较都是基于每个字符的数值。对于 binary string 而言，比较单元就是字节，对于非二进制的字符串，那么单元就是字符，而有的字符集支持多字节字符。
一个 String Literal 可以拥有一个可选的 character set introducer 和 COLLATE clause，可以用来指派特定的字符集跟 collation（TiDB 对此只是做了语法上的兼容，并不实质做处理)。</description>
    </item>
    
    <item>
      <title>Syncer 使用文档</title>
      <link>https://pingcap.com/docs-cn/tools/syncer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tools/syncer/</guid>
      <description>Syncer 使用文档 Syncer 简介 Syncer 是一个数据导入工具，能方便地将 MySQL 的数据增量导入到 TiDB。
Syncer 属于 TiDB 企业版工具集，如何获取可参考下载 TiDB 企业版工具集。
Syncer 架构 下载 TiDB 企业版工具集 (Linux) # 下载 tool 压缩包 wget http://download.pingcap.org/tidb-enterprise-tools-latest-linux-amd64.tar.gz wget http://download.pingcap.org/tidb-enterprise-tools-latest-linux-amd64.sha256 # 检查文件完整性，返回 ok 则正确 sha256sum -c tidb-enterprise-tools-latest-linux-amd64.sha256 # 解开压缩包 tar -xzf tidb-enterprise-tools-latest-linux-amd64.tar.gz cd tidb-enterprise-tools-latest-linux-amd64 Syncer 部署位置 Syncer 可以部署在任一台可以连通对应的 MySQL 和 TiDB 集群的机器上，推荐部署在 TiDB 集群。
Syncer 增量导入数据示例 使用前请详细阅读 Syncer 同步前预检查
设置同步开始的 position 设置 Syncer 的 meta 文件, 这里假设 meta 文件是 syncer.meta:</description>
    </item>
    
    <item>
      <title>TiDB 1.0 release notes</title>
      <link>https://pingcap.com/docs-cn/releases/ga/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/ga/</guid>
      <description>TiDB 1.0 Release Notes 2017 年 10 月 16 日，TiDB 发布 GA 版（TiDB 1.0）。该版本对 MySQL 兼容性、SQL 优化器、系统稳定性、性能做了大量的工作。
TiDB:  SQL 查询优化器
 调整代价模型 Analyze 下推 函数签名下推  优化内部数据格式，减小中间结果大小
 提升 MySQL 兼容性
 支持 NO_SQL_CACHE 语法，控制存储引擎对缓存的使用
 重构 Hash Aggregator 算子，降低内存使用
 支持 Stream Aggragator 算子
  PD:  支持基于读流量的热点调度 支持设置 Store 权重，以及基于权重的调度  TiKV:  Coprocessor 支持更多下推函数 支持取样操作下推 支持手动触发数据 Compact，用于快速回收空间 提升性能和稳定性 增加 Debug API，方便调试  TiSpark Beta Release:  支持可配置框架 支持 ThriftSever/JDBC 和 Spark SQL 脚本入口  源码地址 源码地址</description>
    </item>
    
    <item>
      <title>TiDB 1.1 Alpha Release Notes</title>
      <link>https://pingcap.com/docs-cn/releases/11alpha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/11alpha/</guid>
      <description> TiDB 1.1 Alpha Release Notes 2018 年 1 月 19 日，TiDB 发布 1.1 Alpha 版。该版本对 MySQL 兼容性、SQL 优化器、系统稳定性、性能做了大量的工作。
TiDB：  SQL parser  兼容更多语法  SQL 查询优化器  统计信息减小内存占用 优化统计信息启动时载入的时间 更精确的代价估算 使用 Count-Min Sketch 更精确地估算点查的代价 支持更复杂的条件，更充分使用索引  SQL 执行器  使用 Chunk 结构重构所有执行器算子，提升分析型语句执行性能，减少内存占用 优化 INSERT IGNORE 语句性能 下推更多的类型和函数 支持更多的 SQL_MODE 优化 Load Data 性能，速度提升 10 倍 优化 Use Database 性能 支持对物理算子内存使用进行统计  Server  支持 PROXY protocol   PD：  增加更多的 API 支持 TLS 给 Simulator 增加更多的 case 调度适应不同的 Region size Fix 了一些调度的 bug  TiKV：  支持 Raft learner 优化 Raft Snapshot，减少 I/O 开销 支持 TLS 优化 RocksDB 配置，提升性能 优化 Coprocessor count (*) 和点查 unique index 的性能 增加更多的 Failpoint 以及稳定性测试 case 解决 PD 和 TiKV 之间重连的问题 增强数据恢复工具 tikv-ctl 的功能 Region 支持按 table 进行分裂 支持 Delete Range 功能 支持设置 snapshot 导致的 I/O 上限 完善流控机制  </description>
    </item>
    
    <item>
      <title>TiDB 1.1 Beta Release Notes</title>
      <link>https://pingcap.com/docs-cn/releases/11beta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/11beta/</guid>
      <description>TiDB 1.1 Beta Release Notes 2018 年 2 月 24 日，TiDB 发布 1.1 Beta 版。该版本在 1.1 Alpha 版的基础上，对 MySQL 兼容性、系统稳定性做了很多改进。
TiDB  添加更多监控项, 优化日志 兼容更多 MySQL 语法 在 information_schema 中支持显示建表时间 提速包含 MaxOneRow 算子的查询 控制 Join 产生的中间结果集大小，进一步减少 Join 的内存使用 增加 tidb_config session 变量，输出当前 TiDB 配置 修复 Union 和 Index Join 算子中遇到的 panic 问题 修复 Sort Merge Join 算子在部分场景下结果错误的问题 修复 Show Index 语句显示正在添加过程中的索引的问题 修复 Drop Stats 语句失败的问题 优化 SQL 引擎查询性能，Sysbench 的 Select/OLTP 测试结果提升 10% 使用新的执行引擎提升优化器中的子查询计算速度；相比 1.</description>
    </item>
    
    <item>
      <title>TiDB 2.0 RC1 Release Notes</title>
      <link>https://pingcap.com/docs-cn/releases/2rc1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/2rc1/</guid>
      <description> TiDB 2.0 RC1 Release Notes 2018 年 3 月 9 日，TiDB 发布 2.0 RC1 版。该版本在上一版的基础上，对 MySQL 兼容性、系统稳定性和优化器做了很多改进。
TiDB  支持限制单条 SQL 语句使用内存的大小，减少程序 OOM 风险 支持下推流式聚合算子到 TiKV 支持配置文件的合法性检测 支持 HTTP API 获取 TiDB 参数信息 Parser 兼容更多 MySQL 语法 提升对 Navicat 的兼容性 优化器提升，提取多个 OR 条件的公共表达式，选取更优执行计划 优化器提升，在更多场景下将子查询转换成 Join 算子，选取更优查询计划 使用 Batch 方式 Resolve Lock，提升垃圾回收速度 修复 Boolean 类型的字段长度，提升兼容性 优化 Add Index 操作，所有的读写操作采用低优先级，减小对在线业务的影响  PD  优化检查 Region 状态的代码逻辑，提升程序性能 优化异常情况下日志信息输出，便于调试 修复监控中关于 TiKV 节点磁盘空间不足情况的统计 修复开启 TLS 时健康检查接口误报的问题 修复同时添加副本数量可能超过配置阈值的问题，提升程序稳定性  TiKV  修复 PD leader 切换，gRPC call 没被 cancel 的问题 对重要配置进行保护，第一次设置之后不允许变更 增加获取 metrics 的 gRPC API 启动时候，检查是否使用 SSD 使用 ReadPool 优化读性能，raw get 测试性能提升 30% 完善 metrics，优化 metrics 的使用  </description>
    </item>
    
    <item>
      <title>TiDB 2.0 RC3 Release Notes</title>
      <link>https://pingcap.com/docs-cn/releases/2rc3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/2rc3/</guid>
      <description> TiDB 2.0 RC3 Release Notes 2018 年 3 月 23 日，TiDB 发布 2.0 RC3 版。该版本在 2.0 RC2 版的基础上，对 MySQL 兼容性、系统稳定性和优化器做了很多改进。
TiDB  修复部分场景下 MAX/MIN 结果不正确的问题 修复部分场景下 Sort Merge Join 结果未按照 Join Key 有序的问题 修复边界条件下 uint 和 int 比较的错误 完善浮点数类型的长度和精度检查，提升 MySQL 兼容性 完善时间类型解析报错日志，添加更多错误信息 完善内存控制，新增对 IndexLookupExecutor 的内存统计 优化 ADD INDEX 的执行速度，部分场景下速度大幅度提升 GROUP BY 子句为空时使用 Stream Aggregation 算子，提升速度 支持通过 STRAIGHT_JOIN 来关闭优化器的 Join Reorder 优化 ADMIN SHOW DDL JOBS 输出更详细的 DDL 任务状态信息 支持 ADMIN SHOW DDL JOB QUERIES 查询当前正在运行的 DDL 任务的原始语句 支持 ADMIN RECOVER INDEX 命令，用于灾难恢复情况下修复索引数据 ADD INDEX 操作变更为低优先级，降低对线上业务影响 支持参数为 JSON 类型的 SUM/AVG 等聚合函数 支持配置文件修改 lower_case_table_names 系统变量，用于支持 OGG 数据同步工具 提升对 Navicat 管理工具的兼容性 支持在 CRUD 操作中使用隐式的行 ID  PD  支持 Region Merge，合并数据删除后产生的空 Region 或小 Region 添加副本时忽略有大量 pending peer 的节点，提升恢复副本及下线的速度 优化有大量空 Region 时产生的频繁调度问题 优化不同 label 中资源不均衡的场景中 leader balance 调度的速度 添加更多异常 Region 的统计  TiKV  支持 Region Merge Raft snapshot 流程完成之后立刻通知 PD，加速调度 增加 Raw DeleteRange API 增加 GetMetric API 减缓 RocksDB sync 文件造成的 I/O 波动 优化了对 delete 掉数据的空间回收机制 完善数据恢复工具 tikv-ctl 解决了由于 snapshot 导致下线节点慢的问题 Coprocessor 支持 streaming 支持 Readpool，raw_get/get/batch_get 性能提升 30% 支持配置 Coprocessor 请求超时时间 Coprocessor 支持 streaming aggregation 上报 Region heartbeat 时携带时间信息 限制 snapshot 文件的空间使用，防止占用过多磁盘空间 对长时间不能选出 leader 的 Region 进行记录上报 加速启动阶段的垃圾清理工作 根据 compaction 事件及时更新对应 Region 的 size 信息 对 scan lock 的大小进行限制，防止请求超时 使用 DeleteRange 加速 Region 删除 支持在线修改 RocksDB 的参数  </description>
    </item>
    
    <item>
      <title>TiDB 2.0 RC4 Release Notes</title>
      <link>https://pingcap.com/docs-cn/releases/2rc4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/2rc4/</guid>
      <description> TiDB 2.0 RC4 Release Notes 2018 年 3 月 30 日，TiDB 发布 2.0 RC4 版。该版本在 2.0 RC3 版的基础上，对 MySQL 兼容性、系统稳定性和优化器做了很多改进。
TiDB  支持 SHOW GRANTS FOR CURRENT_USER(); 修复 UnionScan 里的 Expression 没有 Clone 的问题 支持 SET TRANSACTION 语法 修复 copIterator 中潜在的 goroutine 泄露问题 修复 admin check table 对包含 null 的 unique index 误判的问题 支持用科学计数法显示浮点数 修复 binary literal 计算时的类型推导 修复解析 CREATE VIEW 语句的问题 修复语句中同时包含 ORDER BY 和 LIMIT 0 时 panic 的问题 提升 DecodeBytes 执行性能 优化 LIMIT 0 为 TableDual，避免无用的执行计划构建  PD  支持手动 split Region，可用于处理单 Region 热点的问题 修复 pdctl 运行 config show all 不显示 label property 的问题 metrics 及代码结构相关的优化  TiKV  限制接收 snapshot 时的内存使用，解决极端情况下的 OOM 可以配置 Coprocessor 在遇到 warnings 时的行为 TiKV 支持导数据模式 支持 Region 从正中间分裂 提升 CI test 的速度 使用 crossbeam channel 改善 TiKV 在被隔离的情况下由于 leader missing 输出太多日志的问题  </description>
    </item>
    
    <item>
      <title>TiDB 2.0 RC5 Release Notes</title>
      <link>https://pingcap.com/docs-cn/releases/2rc5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/2rc5/</guid>
      <description> TiDB 2.0 RC5 Release Notes 2018 年 4 月 17 日，TiDB 发布 2.0 RC5 版。该版本在 RC4 版的基础上，对 MySQL 兼容性、系统稳定性和优化器做了很多改进。
TiDB  修复应用 Top-N 下推规则的问题 修复对包含 NULL 值的列的行数估算 修复 Binary 类型的 0 值 修复事务内的 BatchGet 问题 回滚 Add Index 操作的时候，清除清除已写入的数据，减少空间占用 优化 insert on duplicate key update 语句性能，提升 10 倍以上 修复 UNIX_TIMESTAMP 函数返回结果类型问题返回结果类型问题 修复在添加 NOT NULL 列的过程中，插入 NULL 值的问题 Show Process List 语句支持显示执行语句的内存占用 修复极端情况下 Alter Table Modify Column 出错问题 支持通过 Alter 语句设置 table comment  PD  添加 Raft Learner 支持 优化 Balance Region Scheduler，减少调度开销 调整默认 schedule-limit 配置 修复频繁分配 ID 问题 修复添加调度兼容性问题  TiKV  tikv-ctl 支持 compact 指定的 Region Raw KV 支持 Batch Put、Batch Get、Batch Delete 和 Batch Scan 解决太多 snapshot 导致的 OOM 问题 Coprocessor 返回更详细的错误信息 支持通过 tikv-ctl 动态修改 TiKV 的 block-cache-size 进一步完善 importer 功能 简化 ImportSST::Upload 接口 设置 gRPC 的 keepalive 属性 tikv-importer 作为独立的 binary 从 TiKV 中分离出来 统计 Coprocessor 每个 scan range 命令扫描了多少行数据 解决在 macOS 系统上的编译问题 优化 metric 相关的内容 解决 snapshot 相关的一个潜在 bug 解决误用了一个 RocksDB metric 的问题 Coprocessor 支持 overflow as warning 选项  </description>
    </item>
    
    <item>
      <title>TiDB 2.0 release notes</title>
      <link>https://pingcap.com/docs-cn/releases/2.0ga/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/2.0ga/</guid>
      <description>TiDB 2.0 Release Notes 2018 年 4 月 27 日，TiDB 发布 2.0 GA 版。相比 1.0 版本，该版本对 MySQL 兼容性、系统稳定性、优化器和执行器做了很多改进。
TiDB  SQL 优化器  精简统计信息数据结构，减小内存占用 加快进程启动时加载统计信息速度 支持统计信息动态更新 [experimental] 优化代价模型，对代价估算更精准 使用 Count-Min Sketch 更精确地估算点查的代价 支持分析更复杂的条件，尽可能充分的使用索引 支持通过 STRAIGHT_JOIN 语法手动指定 Join 顺序 GROUP BY子句为空时使用 Stream Aggregation 算子，提升性能 支持使用索引计算 Max/Min 函数 优化关联子查询处理算法，支持将更多类型的关联子查询解关联并转化成 Left Outer Join 扩大 IndexLookupJoin 的使用范围，索引前缀匹配的场景也可以使用该算法  SQL 执行引擎  使用 Chunk 结构重构所有执行器算子，提升分析型语句执行性能，减少内存占用，显著提升 TPC-H 结果 支持 Streaming Aggregation 算子下推 优化 Insert Into Ignore 语句性能，提升 10 倍以上 优化 Insert On Duplicate Key Update 语句性能，提升 10 倍以上 下推更多的数据类型和函数到 TiKV 计算 优化 Load Data 性能，提升 10 倍以上 支持对物理算子内存使用进行统计，通过配置文件以及系统变量指定超过阈值后的处理行为 支持限制单条 SQL 语句使用内存的大小，减少程序 OOM 风险 支持在 CRUD 操作中使用隐式的行 ID 提升点查性能  Server  支持 Proxy Protocol 添加大量监控项, 优化日志 支持配置文件的合法性检测 支持 HTTP API 获取 TiDB 参数信息 使用 Batch 方式 Resolve Lock，提升垃圾回收速度 支持多线程垃圾回收 支持 TLS  兼容性  支持更多 MySQL 语法 支持配置文件修改 lower_case_table_names 系统变量，用于支持 OGG 数据同步工具 提升对 Navicat 的兼容性 在 Information_Schema 中支持显示建表时间 修复部分函数/表达式返回类型和 MySQL 不同的问题 提升对 JDBC 兼容性 支持更多的 SQL_MODE  DDL  优化 Add Index 的执行速度，部分场景下速度大幅度提升 Add Index 操作变更为低优先级，降低对线上业务影响 Admin Show DDL Jobs 输出更详细的 DDL 任务状态信息 支持 Admin Show DDL Job Queries JobID 查询当前正在运行的 DDL 任务的原始语句 支持 Admin Recover Index 命令，用于灾难恢复情况下修复索引数据 支持通过 Alter 语句修改 Table Options   PD  增加 Region Merge 支持，合并数据删除后产生的空 Region [experimental] 增加 Raft Learner 支持 [experimental] 调度器优化  调度器适应不同的 Region size 提升 TiKV 宕机时数据恢复的优先级和恢复速度 提升下线 TiKV 节点搬迁数据的速度 优化 TiKV 节点空间不足时的调度策略，尽可能防止空间不足时磁盘被写满 提升 balance-leader scheduler 的调度效率 减少 balance-region scheduler 调度开销 优化 hot-region scheduler 的执行效率  运维接口及配置  增加 TLS 支持 支持设置 PD leader 优先级 支持基于 label 配置属性 支持配置特定 label 的节点不调度 Region leader 支持手动 Split Region，可用于处理单 Region 热点的问题 支持打散指定 Region，用于某些情况下手动调整热点 Region 分布 增加配置参数检查规则，完善配置项的合法性较验  调试接口  增加 Drop Region 调试接口 增加枚举各个 PD health 状态的接口  统计相关  添加异常 Region 的统计 添加 Region 隔离级别的统计 添加调度相关 metrics  性能优化  PD leader 尽量与 etcd leader 保持同步，提升写入性能 优化 Region heartbeat 性能，现可支持超过 100 万 Region   TiKV  功能  保护关键配置，防止错误修改 支持 Region Merge [experimental] 添加 Raw DeleteRange API 添加 GetMetric API 添加 Raw Batch Put，Raw Batch Get，Raw Batch Delete 和 Raw Batch Scan 给 Raw KV API 增加 Column Family 参数，能对特定 Column Family 进行操作 Coprocessor 支持 streaming 模式，支持 streaming 聚合 支持配置 Coprocessor 请求的超时时间 心跳包携带时间戳 支持在线修改 RocksDB 的一些参数，包括 block-cache-size 大小等 支持配置 Coprocessor 遇到某些错误时的行为 支持以导数据模式启动，减少导数据过程中的写放大 支持手动对 region 进行对半 split 完善数据修复工具 tikv-ctl Coprocessor 返回更多的统计信息，以便指导 TiDB 的行为 支持 ImportSST API，可以用于 SST 文件导入 [experimental] 新增 TiKV Importer 二进制，与 TiDB Lightning 集成用于快速导入数据 [experimental]  性能  使用 ReadPool 优化读性能，raw_get/get/batch_get 提升 30% 提升 metrics 的性能 Raft snapshot 处理完之后立即通知 PD，加快调度速度 解决 RocksDB 刷盘导致性能抖动问题 提升在数据删除之后的空间回收 加速启动过程中的垃圾清理过程 使用 DeleteFilesInRanges 减少副本迁移时 I/O 开销  稳定性  解决在 PD leader 发送切换的情况下 gRPC call 不返回问题 解决由于 snapshot 导致下线节点慢的问题 限制搬移副本临时占用的空间大小 如果有 Region 长时间没有 Leader，进行上报 根据 compaction 事件及时更新统计的 Region size 限制单次 scan lock 请求的扫描的数据量，防止超时 限制接收 snapshot 过程中的内存占用，防止 OOM 提升 CI test 的速度 解决由于 snapshot 太多导致的 OOM 问题 配置 gRPC 的 keepalive 参数 修复 Region 增多容易 OOM 的问题   TiSpark TiSpark 使用独立的版本号，现为 1.</description>
    </item>
    
    <item>
      <title>TiDB 2.0 升级操作指南</title>
      <link>https://pingcap.com/docs-cn/op-guide/tidb-v2-upgrade-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/tidb-v2-upgrade-guide/</guid>
      <description>TiDB 2.0 升级操作指南 本文档适用于从 TiDB 1.0 版本或 TiDB 2.0 rc 版本升级到 TiDB 2.0 GA 版本。
在中控机器上安装 Ansible 及其依赖 TiDB-Ansible release-2.0 版本依赖 Ansible 2.4.2 及以上版本，兼容最新的 Ansible 2.5 版本，另依赖 Python 模块：jinja2&amp;gt;=2.9.6 和 jmespath&amp;gt;=0.9.0。为方便管理依赖，新版本使用 pip 安装 Ansible 及其依赖，可参照在中控机器上安装 Ansible 及其依赖 进行安装。离线环境参照在中控机器上离线安装 Ansible 及其依赖。
安装完成后，可通过以下命令查看版本：
$ ansible --version ansible 2.5.2 $ pip show jinja2 Name: Jinja2 Version: 2.9.6 $ pip show jmespath Name: jmespath Version: 0.9.0  注意：请务必按以上文档安装 Ansible 及其依赖。确认 Jinja2 版本是否正确，否则启动 Grafana 时会报错。确认 jmespath 版本是否正确，否则滚动升级 TiKV 时会报错。</description>
    </item>
    
    <item>
      <title>TiDB 2.0.1 release notes</title>
      <link>https://pingcap.com/docs-cn/releases/201/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/201/</guid>
      <description> TiDB 2.0.1 Release Notes 2018 年 5 月 16 日，TiDB 发布 2.0.1 版。该版本在 2.0.0 (GA) 版的基础上，对 MySQL 兼容性、系统稳定性做出了改进。
TiDB  实时更新 Add Index 的进度到 DDL 任务信息中 添加 Session 变量 tidb_auto_analyze_ratio 控制统计信息自动更新阈值 修复当事务提交失败时可能未清理所有的残留状态的问题 修复加索引在部分情况下的 Bug 修复 DDL 修改表面操作在某些并发场景下的正确性问题 修复某些情况下 LIMIT 结果不正确的问题 修复 ADMIN CHECK INDEX 语句索引名字区分大小写问题 修复 UNION 语句的兼容性问题 修复插入 TIME 类型数据的兼容性问题 修复某些情况下 copIteratorTaskSender 导致的 goroutine 泄漏问题 增加一个选项，用于设置 TiDB 在写 Binlog 失败的情况下的行为 优化 Coprocessor 慢请求日志格式，区分处理时间长与排队时间长的任务 MySQL 协议握手阶段发生错误不打印日志，避免 KeepAlive 造成大量日志 优化 Out of range value for column 的错误信息 修复 Update 语句中遇到子查询导致结果错误的问题 调整 TiDB 进程处理 SIGTERM 的行为，不等待正在执行的 Query 完成  PD  添加 Scatter Range 调度，调度指定 Key Range 包含的 Region 优化 Merge Region 调度，使新分裂不久的 Region 不能被合并 添加 learner 相关的 metrics 修复重启误删 scheduler 的问题 修复解析配置文件出错问题 修复 etcd leader 和 PD leader 不同步的问题 修复关闭 learner 情况下还有 learner 出现的问题 修复读取包过大造成 load Regions 失败的问题  TiKV  修复 SELECT FOR UPDATE 阻止其他人读的问题 优化慢查询的日志 减少 thread_yield 的调用次数 修复生成 snapshot 会意外阻塞 raftstore 的 bug 修复特殊情况下开启 learner 无法选举成功的问题 修复极端情况下分裂可能导致的脏读问题 修正读线程池的配置默认值 修正删大数据表会影响写性能的问题  </description>
    </item>
    
    <item>
      <title>TiDB 2.0.2 release notes</title>
      <link>https://pingcap.com/docs-cn/releases/202/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/202/</guid>
      <description> TiDB 2.0.2 Release Notes 2018 年 5 月 21 日，TiDB 发布 2.0.2 版。该版本在 2.0.1 版的基础上，对系统稳定性做出了改进。
TiDB  修复 Decimal 除法内置函数下推的问题 支持 Delete 语句中使用 USE INDEX 的语法 禁止在带有 Auto-Increment 的列中使用 shard_row_id_bits 特性 增加写入 Binlog 的超时机制  PD  使 balance leader scheduler 过滤失连节点 更改 transfer leader operator 的超时时间为 10 秒 修复 label scheduler 在集群 Regions 不健康状态下不调度的问题 修复 evict leader scheduler 调度不当的问题  TiKV  修复 Raft 日志没有打出来的问题 支持配置更多 gRPC 相关参数 支持配置选举超时的取值范围 修复过期 learner 没有删掉的问题 修复 snapshot 中间文件被误删的问题  </description>
    </item>
    
    <item>
      <title>TiDB 2.0.3 release notes</title>
      <link>https://pingcap.com/docs-cn/releases/203/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/203/</guid>
      <description> TiDB 2.0.3 Release Notes 2018 年 6 月 1 日，TiDB 发布 2.0.3 版。该版本在 2.0.2 版的基础上，对系统兼容性、稳定性做出了改进。
TiDB  支持在线更改日志级别 支持 COM_CHANGE_USER 命令 支持二进制协议情况下使用时间类型参数 优化带 BETWEEN 表达式的查询条件代价估算 在 SHOW CREATE TABLE 里不显示 FOREIGN KEY 信息 优化带 LIMIT 子句的查询代价估算 修复 YEAR 类型作为唯一索引的问题 修复在没有唯一索引的情况下 ON DUPLICATE KEY UPDATE 的问题 修复 CEIL 函数的兼容性问题 修复 DECIMAL 类型计算 DIV 的精度问题 修复 ADMIN CHECK TABLE 误报的问题 修复 MAX/MIN 在特定表达式参数下 panic 的问题 修复特殊情况下 JOIN 结果为空的问题 修复 IN 表达式构造查询 Range 的问题 修复使用 Prepare 方式进行查询且启用 Plan Cache 情况下的 Range 计算问题 修复异常情况下频繁加载 Schema 信息的问题  PD  修复在特定条件下收集 hot-cache metrics 会 panic 的问题 修复对旧的 Region 产生调度的问题  TiKV  修复 learner flag 错误上报给 PD 的 bug 在 do_div_mod 中 divisor/dividend 为 0 时返回错误  </description>
    </item>
    
    <item>
      <title>TiDB 2.0.4 release notes</title>
      <link>https://pingcap.com/docs-cn/releases/204/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/204/</guid>
      <description> TiDB 2.0.4 Release Notes 2018 年 6 月 15 日，TiDB 发布 2.0.4 版。该版本在 2.0.3 版的基础上，对系统兼容性、稳定性做出了改进。
TiDB  支持 ALTER TABLE t DROP COLUMN a CASCADE 语法 支持设置 tidb_snapshot 变量的值为 TSO 优化监控项中语句类型展示 优化查询代价估计精度 设置 gRPC 的 backoff max delay 参数 支持通过配置文件设置单条语句的内存使用阈值 重构 Optimizer 的 error 解决 Cast Decimal 数据的副作用问题 解决特定场景下 Merge Join 算子结果错误的问题 解决转换 Null 对象到 String 的问题 解决 Cast JSON 数据为 JSON 类型的问题 解决 Union + OrderBy 情况下结果顺序和 MySQL 不一致的问题 解决 Union 语句中对 Limit/OrderBy 子句的合法性检查规则问题 解决 Union All 的结果兼容性问题 解决谓词下推中的一个 Bug 解决 Union 语句对 For Update 子句的兼容性问题 解决 concat_ws 函数对结果错误截断的问题  PD  改进 max-pending-peer-count 调度参数未设置时的行为，调整为不限制最大 PendingPeer 的数量  TiKV  新增 RocksDB PerfContext 接口用于调试 移除 import-mode 参数 为 tikv-ctl 添加 region-properties 命令 优化有大量 RocksDB tombstone 时 reverse-seek 过慢的问题 修复 do_sub 导致的崩溃问题 当 GC 遇到有太多版本的数据时记录日志  </description>
    </item>
    
    <item>
      <title>TiDB 2.0.5 release notes</title>
      <link>https://pingcap.com/docs-cn/releases/205/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/205/</guid>
      <description> TiDB 2.0.5 Release Notes 2018 年 7 月 6 日，TiDB 发布 2.0.5 版。该版本在 2.0.4 版的基础上，对系统兼容性、稳定性做出了改进。
TiDB  New Features  增加一个系统变量 tidb_disable_txn_auto_retry，用于关闭事务自动重试 #6877  Improvements  调整计算 Selection 代价的方式，结果更准确 #6989 查询条件能够完全匹配唯一索引或者主键时，直接选择作为查询路径 #6966 启动服务失败时，做必要的清理工作 #6964 在 Load Data 语句中，将 \N 处理为 NULL #6962 优化 CBO 代码结构 #6953 启动服务时，尽早上报监控数据 #6931 对慢查询日志格式进行优化：去除 SQL 语句中的换行符，增加用户信息 #6920 支持注释中存在多个星号的情况 #6858  Bug Fixes  修复 KILL QUERY 语句权限检查问题 #7003 修复用户数量超过 1024 时可能造成无法登陆的问题 #6986 修复一个写入无符号类型 float/double 数据的问题 #6940 修复 COM_FIELD_LIST 命令的兼容性，解决部分 MariaDB 客户端遇到 Panic 的问题 #6929 修复 CREATE TABLE IF NOT EXISTS LIKE 行为 #6928 修复一个 TopN 下推过程中的问题 #6923 修复 Add Index 过程中遇到错误时当前处理的行 ID 记录问题 #6903   PD  修复某些场景下副本迁移导致 TiKV 磁盘空间耗尽的问题 修复 AdjacentRegionScheduler 导致的崩溃问题  TiKV  修复 decimal 运算中潜在的溢出问题 修复 merge 过程中可能发生的脏读问题  </description>
    </item>
    
    <item>
      <title>TiDB 2.0.6 release notes</title>
      <link>https://pingcap.com/docs-cn/releases/206/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/206/</guid>
      <description> TiDB 2.0.6 Release Notes 2018 年 8 月 6 日，TiDB 发布 2.0.6 版。该版本在 2.0.5 版的基础上，对系统兼容性、稳定性做出了改进。
TiDB  Improvements  精简 &amp;ldquo;set system variable&amp;rdquo; 日志的长度，减少日志文件体积 #7031 在日志中记录 ADD INDEX 执行过程中的慢操作，便于定位问题 #7083 减少更新统计信息操作中的事务冲突 #7138 当待估算的值超过统计信息范围时，提高行数估计的准确度 #7185 当使用 Index Join 时，选择行数估计较小的表作为驱动表，提高 Index Join 的执行效率 #7227 为 ANALYZE TABLE 语句执行过程中发生的 panic 添加 recover 机制，避免收集统计信息过程中的异常行为导致 tidb-server 不可用 #7228 当 RPAD/LPAD 的结果超过设置系统变量 max_allowed_packet 时，返回 NULL 和对应的 warning，兼容 MySQL #7244 设置 PREPARE 语句中占位符数量上限为 65535，兼容 MySQL #7250  Bug Fixes  修复某些情况下，DROP USER 语句和 MySQL 行为不兼容的问题 #7014 修复当 tidb_batch_insert 打开后，INSERT/LOAD DATA 等语句在某些场景下 OOM 的问题 #7092 修复某个表的数据持续更新时，其统计信息自动更新失效的问题 #7093 修复防火墙断掉不活跃的 gRPC 连接的问题 #7099 修复某些场景下使用前缀索引结果不正确的问题 #7126 修复某些场景下统计信息过时导致 panic 的问题 #7155 修复某些场景下 ADD INDEX 后索引数据少一条的问题 #7156 修复某些场景下查询唯一索引上的 NULL 值结果不正确的问题 #7172 修复某些场景下 DECIMAL 的乘法结果出现乱码的问题 #7212 修复某些场景下 DECIMAL 的取模运算结果不正确的问题 #7245 修复某些特殊语句序列下在事务中执行 UPDATE/DELETE 语句后结果不正确的问题 #7219 修复某些场景下 UNION ALL/UPDATE 语句在构造执行计划过程中 panic 的问题 #7225 修复某些场景下前缀索引的索引范围计算错误的问题 #7231 修复某些场景下 LOAD DATA 语句不写 binlog 的问题 #7242 修复某些场景下在 ADD INDEX 过程中 SHOW CREATE TABLE 结果不正确的问题 #7243 修复某些场景下 Index Join 因为没有初始化事务时间戳而 panic 的问题 #7246 修复 ADMIN CHECK TABLE 因为误用 session 中的时区而导致误报的问题 #7258 修复 ADMIN CLEANUP INDEX 在某些场景下索引没有清除干净的问题 #7265 禁用 Read Committed 事务隔离级别 #7282   TiKV  Improvements  扩大默认 scheduler slots 值以减少假冲突现象 减少回滚事务的连续标记以提升冲突极端严重下的读性能 限制 RocksDB log 文件的大小和个数以减少长时间运行下不必要的磁盘占用  Bug Fixes  修复字符串转 Decimal 时出现的 crash   </description>
    </item>
    
    <item>
      <title>TiDB 2.0.7 release notes</title>
      <link>https://pingcap.com/docs-cn/releases/207/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/207/</guid>
      <description> TiDB 2.0.7 Release Notes 2018 年 9 月 7 日，TiDB 发布 2.0.7 版。该版本在 2.0.6 版的基础上，对系统兼容性、稳定性做出了改进。
TiDB  New Feature  在 information_schema 里添加 PROCESSLIST 表 #7286  Improvements  收集更多语句执行细节，并输出在 SLOW QUERY 日志里 #7364 SHOW CREATE TABLE 不再输出分区信息 #7388 通过设置 RC 隔离级别和低优先级优化 ANALYZE 语句执行效率 #7500 加速 ADD UNIQUE INDEX #7562 增加控制 DDL 并发度的选项 #7563  Bug Fixes  修复 PRIMARY KEY 为整数的表，无法使用 USE INDEX(PRIMARY) 的问题 #7298 修复 Merge Join 和 Index Join 在 inner row 为 NULL 时输出多余结果的问题 #7301 修复 chunk size 设置过小时，Join 输出多余结果的问题 #7315 修复建表语句中包含 range column 语法导致 panic 的问题 #7379 修复 admin check table 对时间类型的列误报的问题 #7457 修复以默认值 current_timestamp 插入的数据无法用 = 条件查询到的问题 #7467 修复以 ComStmtSendLongData 命令插入空字符串参数被误解析为 NULL 的问题 #7508 修复特定场景下 auto analyze 不断重复执行的问题 #7556 修复 parser 无法解析以换行符结尾的单行注释的问题 #7635   TiKV  Improvement  空集群默认打开 dynamic-level-bytes 参数减少空间放大  Bug Fix  在 Region merge 之后更新 Region 的 approximate size 和 keys   </description>
    </item>
    
    <item>
      <title>TiDB 2.1 Beta Release Notes</title>
      <link>https://pingcap.com/docs-cn/releases/21beta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/21beta/</guid>
      <description>TiDB 2.1 Beta Release Notes 2018 年 6 月 29 日，TiDB 发布 2.1 Beta 版。相比 2.0 版本，该版本对系统稳定性、优化器、统计信息以及执行引擎做了很多改进。
TiDB  SQL 优化器  优化 Index Join 选择范围，提升执行性能 优化关联子查询，下推 Filter 和扩大索引选择范围，部分查询的效率有数量级的提升 在 UPDATE、DELETE 语句中支持 Index Hint 和 Join Hint 优化器 Hint TIDM_SMJ 在没有索引可用的情况下可生效 支持更多函数下推：ABS/CEIL/FLOOR/IS TRUE/IS FALSE 在常量折叠过程中特殊处理函数 IF 和 IFNULL 优化 EXPLAIN 语句输出格式  SQL 执行引擎  实现并行 Hash Aggregate 算子，部分场景下能提高 Hash Aggregate 计算性能 350% 实现并行 Project 算子，部分场景下性能提升达 74% 并发地读取 Hash Join 的 Inner 表和 Outer 表的数据，提升执行性能 修复部分场景下 INSERT … ON DUPLICATE KEY UPDATE … 结果不正确的问题 修复 CONCAT_WS/FLOOR/CEIL/DIV 内建函数的结果不正确的问题  Server  添加 HTTP API 打散 table 的 Regions 在 TiKV 集群中的分布 添加 auto_analyze_ratio 系统变量控制自动 analyze 的阈值 添加 HTTP API 控制是否打开 general log 添加 HTTP API 在线修改日志级别 在 general log 和 slow query log 中添加 user 信息 支持 Server side cursor  兼容性  支持更多 MySQL 语法 BIT 聚合函数支持 ALL 参数 支持 SHOW PRIVILEGES 语句  DML  减少 INSERT INTO SELECT 语句的内存占用 修复 Plan Cache 的性能问题 添加 tidb_retry_limit 系统变量控制事务自动重试的次数 添加 tidb_disable_txn_auto_retry 系统变量控制事务是否自动重试 修复写入 time 类型的数据精度问题 支持本地冲突事务排队，优化冲突事务性能 修复 UPDATE 语句的 Affected Rows 优化 insert ignore on duplicate key update 语句性能 优化 Create Table 语句的执行速度 优化 Add index 的速度，在某些场景下速度大幅提升 修复 Alter table add column 增加列超过表的列数限制的问题 修复在某些异常情况下 DDL 任务重试导致 TiKV 压力增加的问题 修复在某些异常情况下 TiDB 不断重载 Schema 信息的问题  DDL  Show Create Table 不再输出外键相关的内容 支持 select tidb_is_ddl_owner() 语句，方便判断 TiDB 是否为 DDL Owner 修复某些场景下 YEAR 类型删除索引的问题 修复并发执行场景下的 Rename table 的问题 支持 ALTER TABLE FORCE 语法 支持 ALTER TABLE RENAME KEY TO 语法 admin show ddl jobs 输出信息中添加表名、库名等信息   PD  PD 节点间开启 Raft PreVote，避免网络隔离后恢复时产生的重新选举 优化 Balance Scheduler 频繁调度小 Region 的问题 优化热点调度器，在流量统计信息抖动时适应性更好 region merge 调度时跳过数据行数较多的 Region 默认开启 raft learner 功能，降低调度时出现宕机导致数据不可用的风险 pd-recover 移除 max-replica 参数 增加 Filter相关的 metrics 修复 tikv-ctl unsafe recovery 之后 Region 信息没更新的问题 修复某些场景下副本迁移导致 TiKV 磁盘空间耗尽的问题 兼容性提示  由于新版本存储引擎更新，不支持在升级后回退至 2.</description>
    </item>
    
    <item>
      <title>TiDB 2.1 RC1 Release Notes</title>
      <link>https://pingcap.com/docs-cn/releases/21rc1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/21rc1/</guid>
      <description>TiDB 2.1 RC1 Release Notes 2018 年 8 月 24 日，TiDB 发布 2.1 RC1 版。相比 2.1 Beta 版本，该版本对系统稳定性、优化器、统计信息以及执行引擎做了很多改进。
TiDB  SQL 优化器  修复某些情况下关联子查询去关联后结果不正确的问题 #6972 优化 Explain 输出结果 #7011#7041 优化 IndexJoin 驱动表选择策略#7019 去掉非 PREPARE 语句的 Plan Cache #7040 修复某些情况下 INSERT 语句无法正常解析执行的问题 #7068 修复某些情况下 IndexJoin 结果不正确的问题 #7150 修复某些情况下使用唯一索引不能查询到 NULL 值的问题 #7163 修复 UTF-8 编码情况下前缀索引的范围计算不正确的问题 #7194 修复某些情况下 Project 算子消除导致的结果不正确的问题 #7257 修复主键为整数类型时无法使用 USE INDEX(PRIMARY) 的问题 #7316 修复某些情况下使用关联列无法计算索引范围的问题 #7357  SQL 执行引擎  修复某些情况下夏令时时间计算结果不正确的问题 #6823 重构聚合函数框架，提升 Stream 和 Hash 聚合算子的执行效率 #6852 修复某些情况下 Hash 聚合算子不能正常退出的问题 #6982 修复 BIT_AND/BIT_OR/BIT_XOR 没有正确处理非整型数据的问题 #6994 优化 REPLACE INTO 语句的执行速度，性能提升近 10 倍 #7027 优化时间类型的内存占用，时间类型数据的内存使用降低为原来的一半 #7043 修复 UNION 语句整合有符号和无符号型整数结果时与 MySQL 不兼容的问题 #7112 修复 LPAD/RPAD/TO_BASE64/FROM_BASE64/REPEAT 因为申请过多内存导致 TiDB panic 的问题 #7171 #7266 #7409 #7431 修复 MergeJoin/IndexJoin 在处理 NULL 值时结果不正确的问题 #7255 修复某些情况下 Outer Join 结果不正确的问题 #7288 增强 Data Truncated 的报错信息，便于定位出错的数据和表中对应的字段 #7401 修复某些情况下 Decimal 计算结果不正确的问题 #7001 #7113 #7202 #7208 优化点查的查询性能 #6937 禁用 Read Commited 隔离级别，避免潜在的问题 #7211 修复某些情况下 LTRIM/RTRIM/TRIM 结果不正确的问题 #7291 修复 MaxOneRow 算子无法保证返回结果不超过 1 行的问题 #7375 拆分 range 个数过多的 Coprocessor 请求 #7454  统计信息  优化统计信息动态收集机制 #6796 解决数据频繁更新场景下 Auto Analyze 不工作的问题 #7022 减少统计信息动态更新过程中的写入冲突 #7124 优化统计信息不准确情况下的代价估算 #7175 优化 AccessPath 的代价估算策略 #7233  Server  修复加载权限信息时的 bug #6976 修复 Kill 命令对权限的检查过严问题 #6954 解决 Binary 协议中某些数值类型移除的问题 #6922 精简日志输出 #7029 处理 mismatchClusterID 问题 #7053 增加 advertise-address 配置项 #7078 增加 GrpcKeepAlive 选项 #7100 增加连接或者 Token 时间监控 #7110 优化数据解码性能 #7149 INFORMMATION_SCHEMA 中增加 PROCESSLIST 表 #7236 解决权限验证时多条规则可以命中情况下的顺序问题 #7211 将部分编码相关的系统变量默认值改为 UTF-8 #7198 慢查询日志显示更详细的信息 #7302 支持在 PD 注册 tidb-server 的相关信息并通过 HTTP API 获取 #7082  兼容性  支持 Session 变量 warning_count 和 error_count #6945 读取系统变量时增加 Scope 检查 #6958 支持 MAX_EXECUTION_TIME 语法 #7012 支持更多的 SET 语法 #7020 Set 系统变量值过程中增加合法性校验 #7117 增加 Prepare 语句中 PlaceHolder 数量的校验 #7162 支持 set character_set_results = null #7353 支持 flush status 语法 #7369 修复 SET 和 ENUM 类型在 information_schema 里的 column size #7347 支持建表语句里的 NATIONAL CHARACTER 语法 #7378 支持 LOAD DATA 语句的 CHARACTER SET 语法 #7391 修复 SET 和 ENUM类型的 column info #7417 支持 CREATE USER 语句的 IDENTIFIED WITH 语法 #7402 修复 TIMESTAMP 类型计算过程中丢失精度的问题 #7418 支持更多 SYSTEM 变量的合法性验证 #7196 修复 CHAR_LENGTH 函数在计算 binary string 时结果不正确的问题 #7410 修复在包含 GROUP BY 的语句里 CONCAT 结果不正确的问题 #7448 修复 DECIMAL 类型 CAST 到 STRING 类型时，类型长度不准确的问题 #7451  DML  解决 Load Data 语句的稳定性 #6927 解决一些 Batch 操作情况下的内存使用问题 #7086 提升 Replace Into 语句的性能 #7027 修复写入 CURRENT_TIMESTAMP 时，精度不一致的问题 #7355  DDL  改进 DDL 判断 Schema 是否已经同步的方法, 避免某些情况下的误判 #7319 修复在 ADD INDEX 过程中的 SHOW CREATE TABLE 结果 #6993 非严格 sql-mode 模式下, text/blob/json 的默认值可以为空 #7230 修复某些特定场景下 ADD INDEX 的问题 #7142 大幅度提升添加 UNIQUE-KEY 索引操作的速度 #7132 修复 Prefix-index 在 UTF-8 字符集的场景下的截断问题 #7109 增加环境变量 tidb_ddl_reorg_priority 来控制 add-index 操作的优先级 #7116 修复 information_schema.</description>
    </item>
    
    <item>
      <title>TiDB 2.1 RC2 Release Notes</title>
      <link>https://pingcap.com/docs-cn/releases/21rc2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/21rc2/</guid>
      <description>TiDB 2.1 RC2 Release Notes 2018 年 9 月 14 日，TiDB 发布 2.1 RC2 版。相比 2.1 RC1 版本，该版本对系统稳定性、优化器、统计信息以及执行引擎做了很多改进。
TiDB  SQL 优化器  新版 Planner 设计方案 #7543 提升常量传播优化规则 #7276 增强 Range 的计算逻辑使其能够同时处理多个 IN 或者等值条件 #7577 修复当 Range 为空时，TableScan 的估算结果不正确的问题 #7583 为 UPDATE 语句支持 PointGet 算子 #7586 修复 FirstRow 聚合函数某些情况下在执行过程中 panic 的问题 #7624  SQL 执行引擎  解决 HashJoin 算子在遇到错误的情况下潜在的 DataRace 问题 #7554 HashJoin 算子同时读取内表数据和构建 Hash 表 #7544 优化 Hash 聚合算子性能 #7541 优化 Join 算子性能 #7493、#7433 修复 UPDATE JOIN 在 Join 顺序改变后结果不正确的问题 #7571 提升 Chunk 迭代器的性能 #7585  统计信息  解决重复自动 Analyze 统计信息的问题 #7550 解决统计信息无变化时更新统计信息遇到错误的问题 #7530 Analyze 执行时使用低优先级以及 RC 隔离级别 #7496 支持只在一天中的某个时间段开启统计信息自动更新的功能 #7570 修复统计信息写日志时发生的 panic #7588 支持通过 ANALYZE TABLE WITH BUCKETS 语句配置直方图中桶的个数 #7619 修复更新空的直方图时 panic 的问题 #7640 使用统计信息更新 information_schema.</description>
    </item>
    
    <item>
      <title>TiDB 2.1 RC3 Release Notes</title>
      <link>https://pingcap.com/docs-cn/releases/21rc3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/21rc3/</guid>
      <description>TiDB 2.1 RC3 Release Notes 2018 年 9 月 29 日，TiDB 发布 2.1 RC3 版。相比 2.1 RC2 版本，该版本对系统稳定性、兼容性、优化器以及执行引擎做了很多改进。
TiDB  SQL 优化器  修复语句内包含内嵌的 LEFT OUTER JOIN 时，结果不正确的问题 #7689 增强 JOIN 语句上的 predicate pushdown 优化规则 #7645 修复 UnionScan 算子的 predicate pushdown 优化规则 #7695 修复 Union 算子的 unique key 属性设置不正确的问题 #7680 增强常量折叠的优化规则 #7696 把常量传播后的 filter 是 null 的 data source 优化成 table dual #7756  SQL 执行引擎  优化事务内读请求的性能 #7717 优化部分执行器 Chunk 内存分配的开销 #7540 修复点查全部为 NULL 的列导致数组越界的问题 #7790  Server  修复配置文件里内存配额选项不生效的问题 #7729 添加 tidb_force_priority 系统变量用来整体设置语句执行的优先级 #7694 支持使用 admin show slow 语句来获取 SLOW QUERY LOG #7785  兼容性  修复 information_schema.</description>
    </item>
    
    <item>
      <title>TiDB Ansible 常见运维操作</title>
      <link>https://pingcap.com/docs-cn/op-guide/ansible-operation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/ansible-operation/</guid>
      <description>TiDB Ansible 常见运维操作 启动集群 此操作会按顺序启动整个 TiDB 集群所有组件（包括 PD、TiDB、TiKV 等组件和监控组件）。
$ ansible-playbook start.yml 关闭集群 此操作会按顺序关闭整个 TiDB 集群所有组件（包括 PD、TiDB、TiKV 等组件和监控组件）。
$ ansible-playbook stop.yml 清除集群数据 此操作会关闭 TiDB、Pump、TiKV、PD 服务，并清空 Pump、TiKV、PD 数据目录。
$ ansible-playbook unsafe_cleanup_data.yml 销毁集群 此操作会关闭集群，并清空部署目录，若部署目录为挂载点，会报错，可忽略。
$ ansible-playbook unsafe_cleanup.</description>
    </item>
    
    <item>
      <title>TiDB Ansible 部署方案</title>
      <link>https://pingcap.com/docs-cn/op-guide/ansible-deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/ansible-deployment/</guid>
      <description>TiDB Ansible 部署方案 概述 Ansible 是一款自动化运维工具，TiDB-Ansible 是 PingCAP 基于 Ansible playbook 功能编写的集群部署工具。本文档介绍如何使用 TiDB-Ansible 部署一个完整的 TiDB 集群。
本部署工具可以通过配置文件设置集群拓扑，完成以下各项运维工作：
 初始化操作系统参数 部署 TiDB 集群（包括 PD、TiDB、TiKV 等组件和监控组件） 启动集群 关闭集群 变更组件配置 集群扩容缩容 升级组件版本 清除集群数据 销毁集群   注：对于生产环境，须使用 TiDB-Ansible 部署 TiDB 集群。如果只是用于测试 TiDB 或体验 TiDB 的特性，建议使用 Docker Compose 在单机上快速部署 TiDB 集群。
 准备机器  部署目标机器若干
 建议 4 台及以上，TiKV 至少 3 实例，且与 TiDB、PD 模块不位于同一主机，详见部署建议。 推荐安装 CentOS 7.3 及以上版本 Linux 操作系统，x86_64 架构 (amd64)。 机器之间内网互通。   注：使用 Ansible 方式部署时，TiKV 及 PD 节点数据目录所在磁盘请使用 SSD 磁盘，否则无法通过检测。 如果仅验证功能，建议使用 Docker Compose 部署方案单机进行测试。</description>
    </item>
    
    <item>
      <title>TiDB Controller 使用说明</title>
      <link>https://pingcap.com/docs-cn/tools/tidb-controller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tools/tidb-controller/</guid>
      <description>TiDB Controller 使用说明 TiDB Controller 是 TiDB 的命令行工具，用于获取 TiDB 状态信息，多用于调试。
源码编译 编译环境要求：Go Version 1.7 以上
编译步骤：在 TiDB Controller 项目根目录，使用 make 命令进行编译，生成 tidb-ctl。
编译文档：帮助文档在 doc 文件夹下，如丢失或需要更新，可通过 make doc 命令生成帮助文档。
使用介绍 tidb-ctl 的使用由命令（包括子命令）、选项和参数组成。命令即不带 - 或者 -- 的字符，选项即带有 - 或者 -- 的字符，参数即命令或选项字符后紧跟的传递给命令和选项的字符。
如：tidb-ctl schema in mysql -n db
 schema: 命令 in: schema 的子命令 mysql: in 的参数 -n: 选项 db: -n 的参数  获取帮助 tidb-ctl -h/--help 用于获取帮助信息。tidb-ctl 由多层命令组成，tidb-ctl 及其所有子命令都可以通过 -h/--help 来获取使用帮助。
连接 tidb-ctl -H/--host { TiDB 服务地址} -P/--port { TiDB 服务端口}</description>
    </item>
    
    <item>
      <title>TiDB Docker 部署方案</title>
      <link>https://pingcap.com/docs-cn/op-guide/docker-deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/docker-deployment/</guid>
      <description>TiDB Docker 部署方案 本文介绍如何使用 Docker 部署一个多节点的 TiDB 集群。
 注：对于生产环境，不要使用 Docker 进行部署，而应使用 Ansible 部署 TiDB 集群。
 环境准备 安装 Docker Docker 可以方便地在 Linux / Mac OS / Windows 平台安装，安装方法请参考 Docker 官方文档。
拉取 TiDB 的 Docker 镜像 部署 TiDB 集群主要包括 3 个服务组件:
 TiDB TiKV PD  对应的最新 Docker 镜像可以通过 Docker 官方镜像仓库 获取：
docker pull pingcap/tidb:latest docker pull pingcap/tikv:latest docker pull pingcap/pd:latest 部署一个多节点集群 假设我们打算在 6 台主机上部署一个 TiDB 集群:
   主机名 IP 部署服务 数据盘挂载     host1 192.</description>
    </item>
    
    <item>
      <title>TiDB FAQ</title>
      <link>https://pingcap.com/docs-cn/FAQ/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/FAQ/</guid>
      <description>FAQ 一、 TiDB 介绍、架构、原理 1.1 TiDB 介绍及整体架构 1.1.1 TiDB 整体架构 https://pingcap.com/docs-cn/overview/
1.1.2 TiDB 是什么？ TiDB 是一个分布式 NewSQL 数据库。它支持水平弹性扩展、ACID 事务、标准 SQL、MySQL 语法和 MySQL 协议，具有数据强一致的高可用特性，是一个不仅适合 OLTP 场景还适合 OLAP 场景的混合数据库。
1.1.3 TiDB 是基于 MySQL 开发的吗？ 不是，虽然 TiDB 支持 MySQL 语法和协议，但是 TiDB 是由 PingCAP 团队完全自主开发的产品。
1.1.4 TiDB、TiKV、Placement Driver (PD) 主要作用？  TiDB 是 Server 计算层，主要负责 SQL 的解析、制定查询计划、生成执行器。 TiKV 是分布式 Key-Value 存储引擎，用来存储真正的数据，简而言之，TiKV 是 TiDB 的存储引擎。 PD 是 TiDB 集群的管理组件，负责存储 TiKV 的元数据，同时也负责分配时间戳以及对 TiKV 做负载均衡调度。  1.</description>
    </item>
    
    <item>
      <title>TiDB Pre-GA Release Notes</title>
      <link>https://pingcap.com/docs-cn/releases/prega/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/prega/</guid>
      <description> TiDB Pre-GA Release Notes 2017 年 8 月 30 日，TiDB 发布 Pre-GA 版。该版本对 MySQL 兼容性、SQL 优化器、系统稳定性、性能做了大量的工作。
TiDB:  SQL 查询优化器  调整代价模型 优化索引选择，支持不同类型字段比较的索引选择 支持基于贪心算法的 Join Reorder  大量 MySQL 兼容性相关功能 支持 Natural Join 完成 JSON 类型支持 (Experimental)，包括对 JSON 中的字段查询、更新、建索引 裁剪无用数据，减小执行器内存消耗 支持在 SQL 语句中设置优先级，并根据查询类型自动设置部分语句的优先级 完成表达式重构，执行速度提升 30% 左右  PD:  支持手动切换 PD 集群 Leader  TiKV:  Raft Log 使用独立的 RocksDB 实例 使用 DeleteRange 加快删除副本速度 Coprocessor 支持更多运算符下推 提升性能，提升稳定性  TiSpark Beta Release:  支持谓词下推 支持聚合下推 支持范围裁剪 通过 TPC-H 测试 (除去一个需要 View 的 Query)  </description>
    </item>
    
    <item>
      <title>TiDB RC1 Release Notes</title>
      <link>https://pingcap.com/docs-cn/releases/rc1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/rc1/</guid>
      <description> TiDB RC1 Release Notes 2016 年 12 月 23 日，分布式关系型数据库 TiDB 正式发布 RC1。
TiKV + 提升写入速度 + 降低磁盘空间占用 + 支持百 TB 级别数据 + 提升稳定性，集群规模支持 200 个节点 + 提供 Raw KV API，以及 Golang client PD + PD 调度策略框架优化，策略更加灵活合理 + 添加 label 支持，支持跨 DC 调度 + 提供 PD Controler，方便操作 PD 集群 TiDB + SQL 查询优化器 - 支持 eager aggregate - 更详细的 explain 信息 - union 算子并行化 - 子查询性能优化 - 条件下推优化 - 优化 CBO 框架 + 重构 time 相关类型的实现，提升和 MySQL 的兼容性 + 支持更多的 MySQL 内建函数 + Add Index 语句提速 + 支持用 change column 语句修改列名；支持使用 Alter table 的 modify column 和 change column 完成部分列类型转换 工具 + Loader：兼容 Percona 的 mydumper 数据格式，提供多线程导入、出错重试、断点续传等功能，并且针对 TiDB 有优化 + 开发完成一键部署工具</description>
    </item>
    
    <item>
      <title>TiDB RC2 Release Notes</title>
      <link>https://pingcap.com/docs-cn/releases/rc2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/rc2/</guid>
      <description> TiDB RC2 Release Notes 2017 年 3 月 1 日，TiDB 正式发布 RC2 版。该版本对 MySQL 兼容性、SQL 优化器、系统稳定性、性能做了大量的工作。对于 OLTP 场景，读取性能提升 60%，写入性能提升 30%。另外提供了权限管理功能，用户可以按照 MySQL 的权限管理方式控制数据访问权限。
TiDB  SQL 查询优化器  统计信息收集和使用 关联子查询优化 优化 CBO 框架 通过 Unique Key 信息消除聚合 重构 Expression Distinct 转换为 GroupBy 支持 topn 操作下推  支持基本权限管理 新增大量 MySQL 内建函数 完善 Alter Table 语句，支持修改表名、默认值、注释 支持 Create Table Like 语句 支持 Show Warnings 语句 支持 Rename Table 语句 限制单个事务大小，避免大事务阻塞整个集群 Load Data 过程中对数据进行自动拆分 优化 AddIndex、Delete 语句性能 支持 &amp;ldquo;ANSI_QUOTES&amp;rdquo; sql_mode 完善监控 修复 Bug 修复内存泄漏问题  PD  支持 Label 对副本进行 Location 调度 基于 region 数量的快速调度 pd-ctl 支持更多功能  添加、删除 PD 通过 Key 获取 Region 信息 添加、删除 scheduler 和 operator 获取集群 label 信息   TiKV  支持 Async Apply 提升整体写入性能 使用 prefix seek 提升 Write CF 的读取性能 使用 memory hint prefix 提升 Raft CF 插入性能 优化单行读事务性能 支持更多下推功能 加入更多统计 修复 Bug  </description>
    </item>
    
    <item>
      <title>TiDB RC3 Release Notes</title>
      <link>https://pingcap.com/docs-cn/releases/rc3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/rc3/</guid>
      <description> TiDB RC3 Release Notes 2017 年 6 月 16 日，TiDB 正式发布 RC3 版。该版本对 MySQL 兼容性、SQL 优化器、系统稳定性、性能做了大量的工作。性能方面重点优化了负载均衡调度策略和流程。功能方面进一步完善权限管理功能，用户可以按照 MySQL 的权限管理方式控制数据访问权限。另外 DDL 的速度也得到显著的提升。 同时为了简化运维工作，开源了 TiDB-Ansible 项目，可以一键部署/升级/启停 TiDB 集群。
TiDB  SQL 查询优化器  统计信息收集和使用 关联子查询优化 优化 CBO 框架 通过 Unique Key 信息消除聚合 重构 Expression Distinct 转换为 GroupBy 支持 topn 操作下推  支持基本权限管理 新增大量 MySQL 内建函数 完善 Alter Table 语句，支持修改表名、默认值、注释 支持 Create Table Like 语句 支持 Show Warnings 语句 支持 Rename Table 语句 限制单个事务大小，避免大事务阻塞整个集群 Load Data 过程中对数据进行自动拆分 优化 AddIndex、Delete 语句性能 支持 &amp;ldquo;ANSI_QUOTES&amp;rdquo; sql_mode 完善监控 修复 Bug 修复内存泄漏问题  PD  支持 Label 对副本进行 Location 调度 基于 region 数量的快速调度 pd-ctl 支持更多功能  添加、删除 PD 通过 Key 获取 Region 信息 添加、删除 scheduler 和 operator 获取集群 label 信息    TiKV  支持 Async Apply 提升整体写入性能 使用 prefix seek 提升 Write CF 的读取性能 使用 memory hint prefix 提升 Raft CF 插入性能 优化单行读事务性能 支持更多下推功能 加入更多统计 修复 Bug  </description>
    </item>
    
    <item>
      <title>TiDB RC4 Release Notes</title>
      <link>https://pingcap.com/docs-cn/releases/rc4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/rc4/</guid>
      <description> TiDB RC4 Release Notes 2017 年 8 月 4 日，TiDB 正式发布 RC4 版。该版本对 MySQL 兼容性、SQL 优化器、系统稳定性、性能做了大量的工作。性能方面重点优化了写入速度，计算任务调度支持优先级，避免分析型大事务影响在线事务。SQL 优化器全新改版，查询代价估算更加准确，且能够自动选择 Join 物理算子。功能方面进一步 MySQL 兼容性。 同时为了更好的支持 OLAP 业务，开源了 TiSpark 项目，可以通过 Spark 读取和分析 TiKV 中的数据。
TiDB:  SQL 查询优化器重构  更好的支持 TopN 查询 支持 Join 算子根据代价自动选择 更完善的 Projection Elimination  Schema 版本检查区分 Table，避免 DDL 干扰其他正在执行的事务 支持 BatchIndexJoin 完善 Explain 语句 提升 Index Scan 性能 大量 MySQL 兼容性相关功能 支持 Json 类型及其操作 支持查询优先级、隔离级别的设置  PD:  支持通过 PD 设置 TiKV location labels 调度优化  支持 PD 主动向 TiKV 下发调度命令 加快 region heartbeat 响应速度 优化 balance 算法  优化数据加载，加快 failover 速度  TiKV:  支持查询优先级设置 支持 RC 隔离级别 完善 Jepsen，提升稳定性 支持 Document Store Coprocessor 支持更多下推函数 提升性能，提升稳定性  TiSpark Beta Release:  支持谓词下推 支持聚合下推 支持范围裁剪 通过 TPC-H 测试 (除去一个需要 View 的 Query)  </description>
    </item>
    
    <item>
      <title>TiDB Sysbench 性能对比测试报告 - v2.0.0 对比 v1.0.0</title>
      <link>https://pingcap.com/docs-cn/benchmark/sysbench-v2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/benchmark/sysbench-v2/</guid>
      <description>TiDB Sysbench 性能对比测试报告 - v2.0.0 对比 v1.0.0 测试目的 对比 TiDB 2.0 版本和 1.0 版本在 OLTP 场景下的性能。
测试版本、时间、地点 TiDB 版本：v1.0.8 Vs v2.0.0-rc6
时间：2018 年 4 月
地点：北京
测试环境 IDC 机器
| 类别 | 名称 |
| :&amp;mdash;&amp;mdash;&amp;ndash;: | :&amp;mdash;&amp;mdash;&amp;mdash;: | | OS | Linux (CentOS 7.3.1611) | | CPU | 40 vCPUs, Intel&amp;reg; Xeon&amp;reg; CPU E5-2630 v4 @ 2.20GHz | | RAM | 128GB | | DISK | Optane 500GB SSD * 1 |</description>
    </item>
    
    <item>
      <title>TiDB Sysbench 性能对比测试报告 - v2.1 对比 v2.0</title>
      <link>https://pingcap.com/docs-cn/benchmark/sysbench-v3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/benchmark/sysbench-v3/</guid>
      <description>TiDB Sysbench 性能对比测试报告 - v2.1 对比 v2.0 测试目的 对比 TiDB 2.1 版本和 2.0 版本在 OLTP 场景下的性能。
测试版本、时间、地点 TiDB 版本：v2.1.0-rc.2 vs. v2.0.6
时间：2018 年 9 月
地点：北京
测试环境 IDC 机器：
| 类别 | 名称 |
| :-: | :-: | | OS | Linux (CentOS 7.3.1611) | | CPU | 40 vCPUs, Intel&amp;reg; Xeon&amp;reg; CPU E5-2630 v4 @ 2.20GHz | | RAM | 128GB | | DISK | Optane 500GB SSD * 1 |</description>
    </item>
    
    <item>
      <title>TiDB TPC-H 50G 性能测试报告</title>
      <link>https://pingcap.com/docs-cn/benchmark/tpch-v2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/benchmark/tpch-v2/</guid>
      <description>TiDB TPC-H 50G 性能测试报告 测试目的 测试 TiDB 在 OLAP 场景下 2.0 和 2.1 版本的性能对比。
 注意：不同的测试环境可能使测试结果发生改变。
 测试环境 测试机器信息  系统信息     机器 IP 操作系统 内核版本 文件系统类型     10.0.1.4 CentOS 7.5.1804 64bit 3.10.0-862.3.3.el7.x86_64 ext4   10.0.1.5 CentOS 7.5.1804 64bit 3.10.0-862.3.3.el7.x86_64 ext4   10.0.1.6 CentOS 7.5.1804 64bit 3.10.0-862.3.3.el7.x86_64 ext4   10.0.1.7 CentOS 7.5.1804 64bit 3.10.0-862.3.3.el7.x86_64 ext4   10.0.1.8 CentOS 7.5.1804 64bit 3.</description>
    </item>
    
    <item>
      <title>TiDB TPC-H 50G 性能测试报告</title>
      <link>https://pingcap.com/docs-cn/benchmark/tpch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/benchmark/tpch/</guid>
      <description>TiDB TPC-H 50G 性能测试报告 测试目的 测试 TiDB 在 OLAP 场景下 1.0 和 2.0 版本的性能对比。
 注意：不同的测试环境可能使测试结果发生改变。
 测试环境 测试机器信息  系统信息     机器 IP 操作系统 内核版本 文件系统类型     172.16.31.2 Ubuntu 17.10 64bit 4.13.0-16-generic ext4   172.16.31.3 Ubuntu 17.10 64bit 4.13.0-16-generic ext4   172.16.31.4 Ubuntu 17.10 64bit 4.13.0-16-generic ext4   172.16.31.6 CentOS 7.4.1708 64bit 3.10.0-693.11.6.el7.x86_64 ext4   172.16.31.8 CentOS 7.4.1708 64bit 3.</description>
    </item>
    
    <item>
      <title>TiDB 专用系统变量和语法</title>
      <link>https://pingcap.com/docs-cn/sql/tidb-specific/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/tidb-specific/</guid>
      <description>TiDB 专用系统变量和语法 TiDB 在 MySQL 的基础上，定义了一些专用的系统变量和语法用来优化性能。
System Variable 变量可以通过 SET 语句设置，例如
set @@tidb_distsql_scan_concurrency = 10
如果需要设值全局变量，执行
set @@global.tidb_distsql_scan_concurrency = 10
tidb_snapshot 作用域: SESSION
默认值: 空字符串
这个变量用来设置当前会话期待读取的历史数据所处时刻。 比如当设置为 &amp;ldquo;2017-11-11 20:20:20&amp;rdquo; 时或者一个 TSO 数字 &amp;ldquo;400036290571534337&amp;rdquo;，当前会话将能读取到该时刻的数据。
tidb_import_data 作用域: SESSION
默认值: 0
这个变量用来表示当前状态是否为从 dump 文件中导入数据。 当这个变量被设置为 1 时，唯一索引约束不被检查以加速导入速度。 这个变量不对外用，只是给 lightning 使用，请用户不要自行修改。
tidb_opt_agg_push_down 作用域: SESSION
默认值: 0
这个变量用来设置优化器是否执行聚合函数下推到 Join 之前的优化操作。 当查询中聚合操作执行很慢时，可以尝试设置该变量为 1。
tidb_opt_insubquery_unfold 作用域: SESSION
默认值: 0
这个变量用来设置优化器是否执行 in-子查询展开的优化操作。
tidb_build_stats_concurrency 作用域: SESSION
默认值: 4</description>
    </item>
    
    <item>
      <title>TiDB 事务语句</title>
      <link>https://pingcap.com/docs-cn/sql/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/transaction/</guid>
      <description>TiDB 事务语句 TiDB 支持分布式事务。涉及到事务的语句包括 Autocommit 变量、 START TRANSACTION/BEGIN、 COMMIT 以及 ROLLBACK。
自动提交 语法：
SET autocommit = {0 | 1} 通过设置 autocommit 的值为 1，可以将当前 Session 设置为自动提交状态，0 则表示当前 Session 为非自动提交状态。默认情况下， autocommit 的值为 1。
在自动提交状态，每条语句运行后，会将其修改自动提交到数据库中。否则，会等到运行 COMMIT 语句或者是 BEGIN 语句的时候，才会将之前的修改提交到数据库。
另外 autocommit 也是一个 System Variable，所以可以通过变量赋值语句修改当前 Session 或者是 Global 的值。
SET @@SESSION.autocommit = {0 | 1}; SET @@GLOBAL.autocommit = {0 | 1}; START TRANSACTION, Begin 语法:
BEGIN; START TRANSACTION; START TRANSACTION WITH CONSISTENT SNAPSHOT; 上述三条语句都是事务开始语句，效果相同。通过事务开始语句可以显式地开始一个新的事务，如果这个时候当前 Session 正在一个事务中间过程中，会将当前事务提交后，开启一个新的事务。</description>
    </item>
    
    <item>
      <title>TiDB 事务隔离级别</title>
      <link>https://pingcap.com/docs-cn/sql/transaction-isolation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/transaction-isolation/</guid>
      <description>TiDB 事务隔离级别 事务隔离级别是数据库事务处理的基础，ACID 中 I，即 Isolation，指的就是事务的隔离性。
sql 92标准定义了4种隔离级别，读未提交、读已提交、可重复读、串行化，见下表。
   Isolation Level Dirty Read Nonrepeatable Read Phantom Read Serialization Anomaly     Read uncommitted Possible Possible Possible Possible   Read committed Not possible Possible Possible Possible   Repeatable read Not possible Not possible Not possible in TiDB Possible   Serializable Not possible Not possible Not possible Not possible    TiDB 实现了其中的可重复读。</description>
    </item>
    
    <item>
      <title>TiDB 内存控制文档</title>
      <link>https://pingcap.com/docs-cn/sql/tidb-memory-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/tidb-memory-control/</guid>
      <description>TiDB 内存控制文档 目前 TiDB 已经能够做到追踪单条 SQL 查询过程中的内存使用情况，当内存使用超过一定阈值后也能采取一些操作来预防 OOM 或者排查 OOM 原因。在 TiDB 的配置文件中，我们可以使用如下配置来控制内存使用超阈值时 TiDB 的行为：
# Valid options: [&amp;#34;log&amp;#34;, &amp;#34;cancel&amp;#34;] oom-action = &amp;#34;log&amp;#34;  如果上面的配置项使用的是 &amp;ldquo;log&amp;rdquo;，那么当一条 SQL 的内存使用超过一定阈值（由 session 变量 tidb_mem_quota_query 来控制）后，TiDB 会在 log 文件中打印一条 LOG，然后这条 SQL 继续执行，之后如果发生了 OOM 可以在 log 中找到对应的 SQL。 如果上面的配置项使用的是 &amp;ldquo;cancel&amp;rdquo;，那么当一条 SQL 的内存使用超过一定阈值后，TiDB 会立即中断这条 SQL 的执行并给客户端返回一个 error，error 信息中会详细写明这条 SQL 执行过程中各个占用内存比较多的物理执行算子的内存使用情况。  如何配置一条 SQL 执行过程中的内存使用阈值 目前可通过如下几个 session 变量来控制一条 Query 中的内存使用，大多数用户只需要设置 tidb_mem_quota_query 即可，其他变量是高级配置，大多数用户不需要关心：
   变量名 作用 单位 默认值     tidb_mem_quota_query 配置整条 SQL 的内存使用阈值 Byte 32 &amp;lt;&amp;lt; 30   tidb_mem_quota_hashjoin 配置 Hash Join 的内存使用阈值 Byte 32 &amp;lt;&amp;lt; 30   tidb_mem_quota_mergejoin 配置 Merge Join 的内存使用阈值 Byte 32 &amp;lt;&amp;lt; 30   tidb_mem_quota_sort 配置 Sort 的内存使用阈值 Byte 32 &amp;lt;&amp;lt; 30   tidb_mem_quota_topn 配置 TopN 的内存使用阈值 Byte 32 &amp;lt;&amp;lt; 30   tidb_mem_quota_indexlookupreader 配置 Index Lookup Reader 的内存使用阈值 Byte 32 &amp;lt;&amp;lt; 30   tidb_mem_quota_indexlookupjoin 配置 Index Lookup Join 的内存使用阈值 Byte 32 &amp;lt;&amp;lt; 30   tidb_mem_quota_nestedloopapply 配置 Nested Loop Apply 的内存使用阈值 Byte 32 &amp;lt;&amp;lt; 30    几个使用例子：</description>
    </item>
    
    <item>
      <title>TiDB 历史数据回溯</title>
      <link>https://pingcap.com/docs-cn/op-guide/history-read/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/history-read/</guid>
      <description>TiDB 历史数据回溯 本文档用于描述 TiDB 如何读取历史版本数据，包括具体的操作流程以及历史数据的保存策略。
功能说明 TiDB 实现了通过标准 SQL 接口读取历史数据功能，无需特殊的 client 或者 driver。当数据被更新、删除后，依然可以通过 SQL 接口将更新/删除前的数据读取出来。
另外即使在更新数据之后，表结构发生了变化，TiDB 依旧能用旧的表结构将数据读取出来。
操作流程 为支持读取历史版本数据， 引入了一个新的 system variable: tidb_snapshot ，这个变量是 Session 范围有效，可以通过标准的 Set 语句修改其值。其值为文本，能够存储 TSO 和日期时间。TSO 即是全局授时的时间戳，是从 PD 端获取的; 日期时间的格式可以为： “2016-10-08 16:45:26.999”，一般来说可以只写到秒，比如”2016-10-08 16:45:26”。 当这个变量被设置时，TiDB 会用这个时间戳建立 Snapshot（没有开销，只是创建数据结构），随后所有的 Select 操作都会在这个 Snapshot 上读取数据。
 注意：TiDB 的事务是通过 PD 进行全局授时，所以存储的数据版本也是以 PD 所授时间戳作为版本号。在生成 Snapshot 时，是以 tidb_snapshot 变量的值作为版本号，如果 TiDB Server 所在机器和 PD Server 所在机器的本地时间相差较大，需要以 PD 的时间为准。
 当读取历史版本操作结束后，可以结束当前 Session 或者是通过 Set 语句将 tidb_snapshot 变量的值设为 &amp;ldquo;&amp;ldquo;，即可读取最新版本的数据。</description>
    </item>
    
    <item>
      <title>TiDB 垃圾回收 (GC)</title>
      <link>https://pingcap.com/docs-cn/op-guide/gc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/gc/</guid>
      <description>TiDB 垃圾回收 (GC) TiDB 采用 MVCC 的方式来进行并发控制。当对数据进行更新或者删除时，原有的数据不会被立刻删除，而是会被保留一段时间，并且在这段时间内这些旧数据仍然可以被读取。这使得写入操作和读取操作不必互斥，并使读取历史数据成为可能。
存在超过一定时间并且不再使用的版本会被清理，否则它们将始终占用硬盘空间，并对性能产生负面影响。TiDB 使用一个垃圾回收 (GC) 机制来清理这些旧数据。
工作方式 TiDB 会周期性地进行 GC。每个 TiDB Server 启动后都会在后台运行一个 gc_worker，每个集群中会有其中一个 gc_worker 被选为 leader，leader 负责维护 GC 的状态并向所有的 TiKV Region leader 发送 GC 命令。
配置与监测方法 GC 相关的配置和运行状态记录在 mysql.tidb 这张系统表中，可以通过 SQL 语句进行检测和配置：
mysql&amp;gt; select VARIABLE_NAME, VARIABLE_VALUE from mysql.tidb; +-----------------------+------------------------------------------------------------------------------------------------+ | VARIABLE_NAME | VARIABLE_VALUE | +-----------------------+------------------------------------------------------------------------------------------------+ | bootstrapped | True | | tidb_server_version | 18 | | tikv_gc_leader_uuid | 58accebfa7c0004 | | tikv_gc_leader_desc | host:ip-172-16-30-5, pid:95472, start at 2018-04-11 13:43:30.</description>
    </item>
    
    <item>
      <title>TiDB 基本操作</title>
      <link>https://pingcap.com/docs-cn/try-tidb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/try-tidb/</guid>
      <description>TiDB 基本操作 成功部署 TiDB 集群之后，便可以在 TiDB 中执行 SQL 语句了。因为 TiDB 兼容 MySQL，你可以使用 MySQL 客户端连接 TiDB，并且大多数情况下可以直接执行 MySQL 语句。
本文介绍 CRUD 操作等基本的 SQL 语句。完整的 SQL 语句列表，参见 TiDB SQL 语法详解。
创建、查看和删除数据库 使用 CREATE DATABASE 语句创建数据库。语法如下：
CREATE DATABASE db_name [options]; 例如，要创建一个名为 samp_db 的数据库，可使用以下语句：
CREATE DATABASE IF NOT EXISTS samp_db; 使用 SHOW DATABASES 语句查看数据库：
SHOW DATABASES; 使用 DROP DATABASE 语句删除数据库，例如：
DROP DATABASE samp_db; 创建、查看和删除表 使用 CREATE TABLE 语句创建表。语法如下：
CREATE TABLE table_name column_name data_type constraint; 例如：</description>
    </item>
    
    <item>
      <title>TiDB 快速入门指南</title>
      <link>https://pingcap.com/docs-cn/QUICKSTART/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/QUICKSTART/</guid>
      <description> TiDB 快速入门指南 作为开源分布式 HTAP (Hybrid Transactional and Analytical Processing) 数据库，TiDB 可以部署在本地和云平台上，支持公有云、私有云和混合云。
TiDB 部署方式 你可以根据实际场景或需求，选择相应的方式来部署 TiDB 集群：
 使用 Ansible 部署：如果用于生产环境，须使用 Ansible 部署 TiDB 集群。 使用 Ansible 离线部署：如果部署环境无法访问网络，可使用 Ansible 进行离线部署。 使用 Docker Compose 部署：如果你只是想测试 TiDB、体验 TiDB 的特性，或者用于开发环境，可以使用 Docker Compose 在本地快速部署 TiDB 集群。该部署方式不适用于生产环境。 使用 Docker 部署：你可以使用 Docker 部署 TiDB 集群，但该部署方式不适用于生产环境。  项目源码 TiDB 集群所有组件的源码均可从 GitHub 上直接访问：
 TiDB TiKV PD TiSpark TiDB Operator  </description>
    </item>
    
    <item>
      <title>TiDB 数据库管理</title>
      <link>https://pingcap.com/docs-cn/sql/tidb-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/tidb-server/</guid>
      <description>TiDB 数据库管理 TiDB 服务 TiDB 是指 TiDB 数据库系统，本篇文档涉及到 TiDB 集群的基本管理功能。
TiDB 集群启动配置 可以通过命令行参数或者配置文件设置服务参数，或者是两者一起使用。注意命令行参数的优先级高于配置文件，如果同一个参数两种方式都设置，会以命令行参数中的值为准。具体信息参考这篇文档。
TiDB 数据库系统变量 TiDB 兼容 MySQL 的系统变量，同时定义了一些特有的系统变量用于调整数据库行为，具体信息参考 TiDB 专用系统变量和语法 文档。
TiDB 系统表 和 MySQL 类似，TiDB 中也有系统表，用于存放数据库运行时所需信息。具体信息参考 TiDB 系统数据库文档。
TiDB 数据目录 TiDB 数据存放在存储引擎中，数据目录取决于使用的存储引擎，存储引擎的选择参见 TiDB 启动参数文档。
对于使用本地存储引擎的情况，数据存储在本机硬盘上，目录位置通过 path 参数控制。
对于使用 TiKV 引擎的情况，数据存储在 TiKV 节点上，目录位置通过 data-dir 参数控制。
TiDB 服务器日志文件 TiDB 集群的三个组件（tidb-server、tikv-server、pd-server）默认会将日志输出到标准错误中，并且三个组件都支持设置 --log-file 启动参数 （或者是配置文件中的配置项）将日志输出到文件中。
通过配置文件可以调整日志的行为，具体信息请参见各个组件的配置文件说明。例如： tidb-server 日志配置项。</description>
    </item>
    
    <item>
      <title>TiDB 数据类型</title>
      <link>https://pingcap.com/docs-cn/sql/datatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/datatype/</guid>
      <description>TiDB 数据类型 概述 TiDB 支持 MySQL 除空间类型之外的所有数据类型，包括数值型类型、字符串类型、时间&amp;amp;日期类型、Json 类型。
数据类型定义一般为 T(M[, D])，其中:
 T 表示具体的类型 M 对于整数类型表示最大显示长度；对于浮点数或者定点数表示精度；对于字符类型表示最大长度。M 的最大值取决于具体的类型。 D 表示浮点数/定点数的小数位长度 对于时间&amp;amp;日期类型中的 TIME、DATETIME 以及 TIMESTAMP，定义中可以包含 Fsp 表示秒的精度，其取值范围是0到6，默认的精度为0  数值类型 概述 TiDB 支持 MySQL 所有的数值类型，按照精度可以分为:
 整数类型（精确值) 浮点类型（近似值) 定点类型（精确值)  整数类型 TiDB 支持 MySQL 所有的整数类型，包括 INTEGER/INT、TINYINT、SMALLINT、MEDIUMINT 以及 BIGINT，完整信息参考这篇文档。
类型定义 语法：
BIT[(M)] &amp;gt; 比特值类型。M 表示比特位的长度，取值范围从1到64，其默认值是1。 TINYINT[(M)] [UNSIGNED] [ZEROFILL] &amp;gt; TINYINT 类型。有符号数的范围是[-128, 127]。无符号数的范围是[0, 255]。 BOOL, BOOLEAN &amp;gt; 布尔类型，和 TINYINT(1) 等价。零值被认为是 False，非零值认为是 True。在 TiDB 内部，True 存储为1， False 存储为0。 SMALLINT[(M)] [UNSIGNED] [ZEROFILL] &amp;gt; SMALLINT 类型。有符号数的范围是[-32768, 32767]。无符号数的范围是[0, 65535]。 MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL] &amp;gt; MEDIUMINT 类型。有符号数的范围是[-8388608, 8388607]。无符号数的范围是[0, 16777215]。 INT[(M)] [UNSIGNED] [ZEROFILL] &amp;gt; INT 类型。 有符号数的范围是[-2147483648, 2147483647]。无符号数的范围是[0, 4294967295]。 INTEGER[(M)] [UNSIGNED] [ZEROFILL] &amp;gt; 和 INT 相同。 BIGINT[(M)] [UNSIGNED] [ZEROFILL] &amp;gt; BIGINT 类型。 有符号数的范围是[-9223372036854775808, 9223372036854775807]。无符号数的范围是[0, 18446744073709551615]。 字段意义:</description>
    </item>
    
    <item>
      <title>TiDB 整体架构</title>
      <link>https://pingcap.com/docs-cn/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/architecture/</guid>
      <description>TiDB 整体架构 要深入了解 TiDB 的水平扩展和高可用特点，首先需要了解 TiDB 的整体架构。TiDB 集群主要包括三个核心组件：TiDB Server，PD Server 和 TiKV Server。此外，还有用于解决用户复杂 OLAP 需求的 TiSpark 组件。
TiDB Server TiDB Server 负责接收 SQL 请求，处理 SQL 相关的逻辑，并通过 PD 找到存储计算所需数据的 TiKV 地址，与 TiKV 交互获取数据，最终返回结果。TiDB Server 是无状态的，其本身并不存储数据，只负责计算，可以无限水平扩展，可以通过负载均衡组件（如LVS、HAProxy 或 F5）对外提供统一的接入地址。
PD Server Placement Driver (简称 PD) 是整个集群的管理模块，其主要工作有三个：一是存储集群的元信息（某个 Key 存储在哪个 TiKV 节点）；二是对 TiKV 集群进行调度和负载均衡（如数据的迁移、Raft group leader 的迁移等）；三是分配全局唯一且递增的事务 ID。
PD 是一个集群，需要部署奇数个节点，一般线上推荐至少部署 3 个节点。
TiKV Server TiKV Server 负责存储数据，从外部看 TiKV 是一个分布式的提供事务的 Key-Value 存储引擎。存储数据的基本单位是 Region，每个 Region 负责存储一个 Key Range（从 StartKey 到 EndKey 的左闭右开区间）的数据，每个 TiKV 节点会负责多个 Region。TiKV 使用 Raft 协议做复制，保持数据的一致性和容灾。副本以 Region 为单位进行管理，不同节点上的多个 Region 构成一个 Raft Group，互为副本。数据在多个 TiKV 之间的负载均衡由 PD 调度，这里也是以 Region 为单位进行调度。</description>
    </item>
    
    <item>
      <title>TiDB 核心特性</title>
      <link>https://pingcap.com/docs-cn/features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/features/</guid>
      <description>TiDB 核心特性 本文详细介绍 TiDB 的两大核心特性：水平扩展与高可用。
水平扩展 无限水平扩展是 TiDB 的一大特点，这里说的水平扩展包括两方面：计算能力和存储能力。TiDB Server 负责处理 SQL 请求，随着业务的增长，可以简单的添加 TiDB Server 节点，提高整体的处理能力，提供更高的吞吐。TiKV 负责存储数据，随着数据量的增长，可以部署更多的 TiKV Server 节点解决数据 Scale 的问题。PD 会在 TiKV 节点之间以 Region 为单位做调度，将部分数据迁移到新加的节点上。所以在业务的早期，可以只部署少量的服务实例（推荐至少部署 3 个 TiKV， 3 个 PD，2 个 TiDB），随着业务量的增长，按照需求添加 TiKV 或者 TiDB 实例。
高可用 高可用是 TiDB 的另一大特点，TiDB/TiKV/PD 这三个组件都能容忍部分实例失效，不影响整个集群的可用性。下面分别说明这三个组件的可用性、单个实例失效后的后果以及如何恢复。
 TiDB
TiDB 是无状态的，推荐至少部署两个实例，前端通过负载均衡组件对外提供服务。当单个实例失效时，会影响正在这个实例上进行的 Session，从应用的角度看，会出现单次请求失败的情况，重新连接后即可继续获得服务。单个实例失效后，可以重启这个实例或者部署一个新的实例。
 PD
PD 是一个集群，通过 Raft 协议保持数据的一致性，单个实例失效时，如果这个实例不是 Raft 的 leader，那么服务完全不受影响；如果这个实例是 Raft 的 leader，会重新选出新的 Raft leader，自动恢复服务。PD 在选举的过程中无法对外提供服务，这个时间大约是3秒钟。推荐至少部署三个 PD 实例，单个实例失效后，重启这个实例或者添加新的实例。
 TiKV
TiKV 是一个集群，通过 Raft 协议保持数据的一致性（副本数量可配置，默认保存三副本），并通过 PD 做负载均衡调度。单个节点失效时，会影响这个节点上存储的所有 Region。对于 Region 中的 Leader 结点，会中断服务，等待重新选举；对于 Region 中的 Follower 节点，不会影响服务。当某个 TiKV 节点失效，并且在一段时间内（默认 30 分钟）无法恢复，PD 会将其上的数据迁移到其他的 TiKV 节点上。</description>
    </item>
    
    <item>
      <title>TiDB 版本发布历史</title>
      <link>https://pingcap.com/docs-cn/releases/rn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/releases/rn/</guid>
      <description> TiDB 版本发布历史 TiDB 历史版本发布声明如下：
 2.1 RC3 2.1 RC2 2.0.7 2.1 RC1 2.0.6 2.0.5 2.1 Beta 2.0.4 2.0.3 2.0.2 2.0.1 2.0 2.0 RC5 2.0 RC4 2.0 RC3 2.0 RC1 1.1 Beta 1.1 Alpha 1.0 Pre-GA RC4 RC3 RC2 RC1  </description>
    </item>
    
    <item>
      <title>TiDB 用户文档</title>
      <link>https://pingcap.com/docs-cn/sql/user-manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/user-manual/</guid>
      <description> TiDB 用户文档 TiDB 支持 SQL92 标准并兼容 MySQL 语法，为了帮您更好地使用 TiDB, 该文档沿用了 MySQL 大部分的文档结构， 同时针对 TiDB 特有的功能作了详细的描述。
TiDB 数据库管理  TiDB 服务 TiDB 进程启动参数 TiDB 数据目录 TiDB 系统数据库 TiDB 系统变量 TiDB 专用系统变量和语法 TiDB 服务器日志文件 TiDB 访问权限管理 TiDB 用户账户管理 使用加密连接  SQL 优化  理解 TiDB 执行计划 统计信息  语言结构  字面值  字符串字面值 数字字面值 NULL 值 十六进制字面值 date 和 time 字面值 布尔值 bit-val 字面值  数据库、表、索引、列和别名 关键字和保留字 用户变量 表达式语法 注释语法  字符集和时区  字符集支持 字符集配置 时区  数据类型  数值类型 日期和时间类型 字符串类型 JSON 数据类型 数据类型默认值  函数和操作符  函数和操作符概述 表达式求值的类型转换 操作符 控制流程函数 字符串函数 数值函数与操作符 日期和时间函数 位函数和操作符 Cast 函数和操作符 加密和压缩函数 信息函数 JSON 函数 信息函数 全局事务 ID 函数 [TBD] GROUP BY 聚合函数 其他函数 精度数学  SQL 语句语法  数据定义语句(DDL) 数据操作语句(DML) 事务语句 数据库管理语句 Prepared SQL 语句语法 实用工具语句 TiDB SQL 语法图  JSON 支持  JSON 支持  Connectors 和 API  Connectors 和 API  错误码与故障诊断  错误码与故障诊断  与 MySQL 兼容性对比  与 MySQL 兼容性对比  </description>
    </item>
    
    <item>
      <title>TiDB 用户账户管理</title>
      <link>https://pingcap.com/docs-cn/sql/user-account-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/user-account-management/</guid>
      <description>TiDB 用户账户管理 用户名和密码 TiDB 将用户账户存储在 mysql.user 系统表里面。每个账户由用户名和 host 作为标识。每个账户可以设置一个密码。
通过 MySQL 客户端连接到 TiDB 服务器，通过指定的账户和密码登陆：
shell&amp;gt; mysql --port 4000 --user xxx --password 使用缩写的命令行参数则是：
shell&amp;gt; mysql -P 4000 -u xxx -p 添加用户 添加用户有两种方式：
 通过标准的用户管理的 SQL 语句创建用户以及授予权限，比如 CREATE USER 和 GRANT 。 直接通过 INSERT ， UPDATE 和 DELETE 操作授权表。  推荐的方式是使用第一种。第二种方式修改容易导致一些不完整的修改，因此不推荐。还有另一种可选方式是使用第三方工具的图形化界面工具。
下面的例子用 CREATE USER 和 GRANT 语句创建了四个账户：
mysql&amp;gt; CREATE USER &amp;#39;finley&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;some_pass&amp;#39;; mysql&amp;gt; GRANT ALL PRIVILEGES ON *.* TO &amp;#39;finley&amp;#39;@&amp;#39;localhost&amp;#39; WITH GRANT OPTION; mysql&amp;gt; CREATE USER &amp;#39;finley&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;some_pass&amp;#39;; mysql&amp;gt; GRANT ALL PRIVILEGES ON *.</description>
    </item>
    
    <item>
      <title>TiDB 监控框架概述</title>
      <link>https://pingcap.com/docs-cn/op-guide/monitor-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/monitor-overview/</guid>
      <description>TiDB 监控框架概述 TiDB 使用开源时序数据库 Prometheus 作为监控和性能指标信息存储方案，使用 Grafana 作为可视化组件进行展示。
Prometheus 是一个拥有多维度数据模型，灵活的查询语句的时序数据库。Prometheus 作为热门的开源项目，拥有活跃的社区及众多的成功案例。
Prometheus 提供了多个组件供用户使用。目前，我们使用 Prometheus Server，来收集和存储时间序列数据。Client 代码库，在程序中定制需要的 Metric 。Push GateWay 来接收 Client Push 上来的数据，统一供 Prometheus 主服务器抓取。以及 AlertManager 来实现报警机制。其结构如下图：
Grafana 是一个开源的 metric 分析及可视化系统。我们使用 Grafana 来展示 TiDB 的各项性能指标 。如下图所示:</description>
    </item>
    
    <item>
      <title>TiDB 简介</title>
      <link>https://pingcap.com/docs-cn/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/overview/</guid>
      <description>TiDB 简介 TiDB 是 PingCAP 公司设计的开源分布式 HTAP (Hybrid Transactional and Analytical Processing) 数据库，结合了传统的 RDBMS 和 NoSQL 的最佳特性。TiDB 兼容 MySQL，支持无限的水平扩展，具备强一致性和高可用性。TiDB 的目标是为 OLTP (Online Transactional Processing) 和 OLAP (Online Analytical Processing) 场景提供一站式的解决方案。
TiDB 具备如下特性：
 高度兼容 MySQL
大多数情况下，无需修改代码即可从 MySQL 轻松迁移至 TiDB，分库分表后的 MySQL 集群亦可通过 TiDB 工具进行实时迁移。
 水平弹性扩展
通过简单地增加新节点即可实现 TiDB 的水平扩展，按需扩展吞吐或存储，轻松应对高并发、海量数据场景。
 分布式事务
TiDB 100% 支持标准的 ACID 事务。
 真正金融级高可用
相比于传统主从 (M-S) 复制方案，基于 Raft 的多数派选举协议可以提供金融级的 100% 数据强一致性保证，且在不丢失大多数副本的前提下，可以实现故障的自动恢复 (auto-failover)，无需人工介入。
 一站式 HTAP 解决方案</description>
    </item>
    
    <item>
      <title>TiDB 系统数据库</title>
      <link>https://pingcap.com/docs-cn/sql/system-database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/system-database/</guid>
      <description>TiDB 系统数据库 TiDB 的系统数据库跟 MySQL 类似，里面包含一些服务器运行时需要的信息。
权限系统表 这些系统表里面包含了用户账户以及相应的授权信息：
 user 用户账户，全局权限，以及其它一些非权限的列 db 数据库级别的权限 tables_priv 表级的权限 columns_priv 列级的权限  服务端帮助信息系统表  help_topic 目前为空  统计信息相关系统表  stats_buckets 统计信息的桶 stats_histograms 统计信息的直方图 stats_meta 表的元信息，比如总行数和修改数  GC Worker 相关系统表  gc_delete_range  其它系统表  GLOBAL_VARIABLES 全局系统变量表 tidb 用于 TiDB 在 bootstrap 的时候记录相关版本信息  INFORMATION_SCHEMA 里面的表 INFORMATION_SCHEMA 库里面的表主要是为了兼容 MySQL 而存在，有些第三方软件会查询里面的信息。在目前 TiDB 的实现中，里面大部分只是一些空表。
CHARACTER_SETS Table 提供字符集相关的信息，其实数据是假的。TiDB 默认支持并且只支持 utf8mb4 。
mysql&amp;gt; select * from CHARACTER_SETS; +--------------------|----------------------|-----------------------|--------+ | CHARACTER_SET_NAME | DEFAULT_COLLATE_NAME | DESCRIPTION | MAXLEN | +--------------------|----------------------|-----------------------|--------+ | ascii | ascii_general_ci | US ASCII | 1 | | binary | binary | Binary pseudo charset | 1 | | latin1 | latin1_swedish_ci | cp1252 West European | 1 | | utf8 | utf8_general_ci | UTF-8 Unicode | 3 | | utf8mb4 | utf8mb4_general_ci | UTF-8 Unicode | 4 | +--------------------|----------------------|-----------------------|--------+ 5 rows in set (0.</description>
    </item>
    
    <item>
      <title>TiDB 路线图</title>
      <link>https://pingcap.com/docs-cn/ROADMAP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/ROADMAP/</guid>
      <description> TiDB 路线图 TiDB： 优化器 重构 Ranger 代价模型优化 Cascades model planner Join Reorder  统计信息 基于 Query Feedback 动态更新统计信息 自动 Analyze 提升 Row Count 估算精度  执行引擎 下推 Projection 到 Coprocessor 优化 HashJoin 算子执行速度 算子并行化 并行 Projection 并行聚合 并行 Sort  Compact Row Format，节省内存占用 File Sort  View 窗口函数 Common Table Expression 分区表 Range 分区 Hash 分区  聚簇索引 新的 storage row format Query Tracing DDL 改进 Add Index 加速 并行 DDL 支持锁表 支持改变 column 类型 支持修改主键 支持一条语句中多个 DDL 操作  支持 utf8_general_ci collation  TiKV： Raft Region Merge - 合并小的 Region 以减少开销 Local Read Thread - 把读请求放在一个单独的线程处理 批量 Region Split - 加速大的 Region 的分裂 Raft Learner - 支持 Raft learner 使得成员变更过程更加平滑 Raft Pre-voter - 支持 Raft Pre-vote 避免网络隔离带来不必要的选举 Joint Consensus - 安全地进行多个成员变更 多线程 Raftstore - 在多个线程处理不同 Region 的 Raft 逻辑 多线程 Apply Pool - 在多个线程执行不同 Region 已经提交了的命令  Engine Titan - 把大的 key-values 从 LSM-Tree 中分离出来 可拔插的 Engine 接口 - 简化接口逻辑并且提供可扩展性  Storage 在 scheduler 里做流控提前避免 write stall  Transaction 优化事务冲突 分布式 GC - 把 MVCC 垃圾回收的逻辑分布到 TiKV 控制  Coprocessor Streaming - 把大的数据集切成小块返回以减少内存消耗 Chunk Execution - 按 chunk 的方式来处理数据以提高性能 请求跟踪 - 提供单个请求执行的详细信息  Tools TiKV Importer - 通过直接导入 SST 文件的方式加速数据导入  Client 提供 Rust 版本的 TiKV client gRPC 消息批量化 - 减少消息交互的开销   PD： Namespace 完善 不同 Namespace 或者 Table 配置不同的副本策略  Table Region 分散调度 调度支持优先级，更加可控 使用机器学习优化调度 优化 Region 元信息存储 - 把元信息存储在一个独立的存储引擎里  TiSpark： Limit/Order 下推 DAG 接口接入（废除 Select 接口） Index Join 和并行 merge join Data Federation（桥接其他数据源，最好能和社区同步，这个接进来可以比较好扩展 Usecase，如果再做一个 InputFormat 适配就可以接 Hive 和 Presto 这些 Hadoop 上的数仓）  Tools: 集群部署工具 高性能数据导入工具 集群备份和恢复工具 (包括全量+增量备份) 数据在线迁移工具 (Syncer 升级版) 集群诊断和分析工具  </description>
    </item>
    
    <item>
      <title>TiDB 软件和硬件环境要求</title>
      <link>https://pingcap.com/docs-cn/op-guide/recommendation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/recommendation/</guid>
      <description>TiDB 软件和硬件环境要求 概述 TiDB 作为一款开源分布式 NewSQL 数据库，可以很好的部署和运行在 Intel 架构服务器环境及主流虚拟化环境，并支持绝大多数的主流硬件网络。作为一款高性能数据库系统，TiDB 支持主流的 Linux 操作系统环境。
Linux 操作系统版本要求    Linux 操作系统平台 版本     Red Hat Enterprise Linux 7.3 及以上   CentOS 7.3 及以上   Oracle Enterprise Linux 7.3 及以上   Ubuntu LTS 16.04 及以上     注：
 TiDB 只支持 Red Hat 兼容内核 (RHCK) 的 Oracle Enterprise Linux，不支持 Oracle Enterprise Linux 提供的 Unbreakable Enterprise Kernel。 TiDB 在 CentOS 7.</description>
    </item>
    
    <item>
      <title>TiDB 运维文档</title>
      <link>https://pingcap.com/docs-cn/op-guide/op-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/op-guide/</guid>
      <description> TiDB 运维文档 软硬件环境需求  软硬件环境需求  部署集群  Ansible 部署方案 (强烈推荐) 离线 Ansible 部署方案 Docker 部署方案 跨机房部署方案  配置集群  配置参数 使用 Ansible 变更组件配置  监控集群  整体监控框架概述 重要监控指标详解 组件状态 API &amp;amp; 监控  扩容缩容  集群扩容缩容方案 使用 Ansible 扩容缩容  升级  使用 Anisble 升级组件版本 TiDB 2.0 升级操作指南  性能调优  TiKV 性能参数调优  备份与迁移  备份与恢复 数据迁移  全量导入 增量导入   </description>
    </item>
    
    <item>
      <title>TiDB 进程启动参数</title>
      <link>https://pingcap.com/docs-cn/sql/server-command-option/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/server-command-option/</guid>
      <description>TiDB 进程启动参数 启动 TiDB 进程时，可以指定一些程序启动参数。
TiDB 接受许多的启动参数，执行这个命令可以得到一个简要的说明：
./tidb-server --help 获取版本信息可以使用下面命令：
./tidb-server -V 以下是启动参数的完整描述。
-L  Log 级别 默认: &amp;ldquo;info&amp;rdquo; 可选值包括 debug, info, warn, error 或者 fatal  -P  TiDB 服务监听端口 默认: &amp;ldquo;4000&amp;rdquo; TiDB 服务将会使用这个端口接受 MySQL 客户端发过来的请求  --binlog-socket  TiDB 服务使用 unix socket file 方式接受内部连接，如 PUMP 服务 默认: &amp;ldquo;&amp;rdquo; 譬如使用 &amp;ldquo;/tmp/pump.sock&amp;rdquo; 来接受 PUMP unix socket file 通信  --config  TiDB 配置文件 默认: &amp;ldquo;&amp;rdquo; 配置文件的路径  --lease  Schema 的租约时间，单位：秒 默认: &amp;ldquo;10&amp;rdquo; Schema 的 lease 主要用在 online schema changes 上面。这个值会影响到实际的 DDL 语句的执行时间。大多数情况下，用户不需要修改这个值，除非您清晰的了解 TiDB DDL 的内部实现机制  --host  TiDB 服务监听 host 默认: &amp;ldquo;0.</description>
    </item>
    
    <item>
      <title>TiDB 配置项解释</title>
      <link>https://pingcap.com/docs-cn/op-guide/tidb-config-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/tidb-config-file/</guid>
      <description>TiDB 配置项解释 TiDB 配置文件比命令行参数支持更多的选项。你可以在 config/config.toml.example 找到默认的配置文件，重命名为 config.toml 即可。
本文档只阐述未包含在命令行参数中的参数，命令行参数参见这里。
split-table  为每个 table 建立单独的 Region。 默认: true 如果需要创建大量的表，我们建议把这个参数设置为 false。  oom-action  指定 TiDB 发生 out-of-memory 错误时的操作。 默认: &amp;ldquo;log&amp;rdquo; 现在合法的选项是 [&amp;ldquo;log&amp;rdquo;, &amp;ldquo;cancel&amp;rdquo;]，如果为 &amp;ldquo;log&amp;rdquo;，仅仅是打印日志，不作实质处理。如果为 &amp;ldquo;cancel&amp;rdquo;，我们会取消执行这个操作，并且输出日志。  enable-streaming  开启 coprocessor 的 streaming 获取数据模式。 默认: false  lower-case-table-names  这个选项可以设置 TiDB 的系统变量 lower_case_table_names 的值。 默认: 2 具体可以查看 MySQL 关于这个变量的描述 注意：目前 TiDB 只支持将该选项的值设为 2，即按照大小写来保存表名，按照小写来比较（不区分大小写）。  log 日志相关的配置项。
format  指定日志输出的格式，可选项为 [json, text, console]。 默认: &amp;ldquo;text&amp;rdquo;  disable-timestamp  是否禁止在日志中输出时间戳。 默认: false 如果设置为 true，那么日志里面将不会输出时间戳。  slow-query-file  慢查询日志的文件名。 默认: &amp;ldquo;&amp;rdquo; 设置后，慢查询日志会单独输出到该文件。  slow-threshold  输出慢日志的耗时阈值。 默认: 300ms 当查询大于这个值，就会当做是一个慢查询，输出到慢查询日志。  expensive-threshold  输出 expensive 操作的行数阈值。 默认: 10000 当查询的行数(包括中间结果，基于统计信息)大于这个值，我们就会当成是一个 expensive 的操作，输出一个前缀带有 [EXPENSIVE_QUERY] 的日志。  query-log-max-len  最长的 SQL 输出长度。 默认: 2048 当语句的长度大于 query-log-max-len，将会被截断输出。  log.</description>
    </item>
    
    <item>
      <title>TiDB 集群扩容缩容方案</title>
      <link>https://pingcap.com/docs-cn/op-guide/horizontal-scale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/horizontal-scale/</guid>
      <description>TiDB 集群扩容缩容方案 概述 TiDB 集群可以在不影响线上服务的情况下动态进行扩容和缩容。
 注：如果使用 Ansible 部署 TiDB 集群，请参考使用 Ansible 扩容缩容。
 下面分别介绍如何增加或者删除 PD，TiKV 以及 TiDB 的节点。
下面用到的 pd-ctl 文档可以参考 pd-control。
PD 假设现在我们有三个 PD 服务，详细信息如下：
   Name ClientUrls PeerUrls     pd1 http://host1:2379 http://host1:2380   pd2 http://host2:2379 http://host2:2380   pd3 http://host3:2379 http://host3:2380    我们可以通过 pd-ctl 来查看当前所有 PD 节点的信息：
./pd-ctl -u http://host1:2379 &amp;gt;&amp;gt; member 动态添加节点 我们可以使用 join 参数，将一个新的 PD 服务加入到现有的 PD 集群里面。 如果我们需要添加 pd4，只需要在 --join 参数里面填入当前 PD 集群任意一个 PD 服务的 client url，比如：</description>
    </item>
    
    <item>
      <title>TiDB 集群故障诊断</title>
      <link>https://pingcap.com/docs-cn/trouble-shooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/trouble-shooting/</guid>
      <description>TiDB 集群故障诊断 当试用 TiDB 遇到问题时，请先参考本篇文档。如果问题未解决，请按文档要求收集必要的信息通过 Github 提供给 TiDB 开发者。
如何给 TiDB 开发者报告错误 当使用 TiDB 遇到问题并且通过后面所列信息无法解决时，请收集以下信息并创建新 Issue:
 具体的出错信息以及正在执行的操作 当前所有组件的状态 出问题组件 log 中的 error/fatal/panic 信息 机器配置以及部署拓扑 dmesg 中 TiDB 组件相关的问题  数据库连接不上 首先请确认集群的各项服务是否已经启动，包括 tidb-server、pd-server、tikv-server。请用 ps 命令查看所有进程是否在。如果某个组件的进程已经不在了，请参考对应的章节排查错误。
如果所有的进程都在，请查看 tidb-server 的日志，看是否有报错？常见的错误包括：
 InfomationSchema is out of date
无法连接 tikv-server，请检查 pd-server 以及 tikv-server 的状态和日志。
 panic
程序有错误，请将具体的 panic log 提供给 TiDB 开发者。
  如果是清空数据并重新部署服务，请确认以下信息：
 pd-server、tikv-server 数据都已清空
tikv-server 存储具体的数据，pd-server 存储 tikv-server 中数据的的元信息。如果只清空 pd-server 或只清空 tikv-server 的数据，会导致两边数据不匹配。</description>
    </item>
    
    <item>
      <title>TiDB 集群监控</title>
      <link>https://pingcap.com/docs-cn/op-guide/monitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/monitor/</guid>
      <description>TiDB 集群监控 TiDB 集群状态监控目前有两种接口，第一种是通过 HTTP 接口对外汇报组件的信息，我们称之为组件的状态接口；第二种是使用 prometheus 记录组件中各种操作的详细信息，我们称之为 metrics 接口。
组件状态接口 这类接口可以获取组件的一些基本信息，并且可以作为 keepalive 监测接口。另外 PD 的接口可以看到整个 TiKV 集群的详细信息。
TiDB Server TiDB 对外暴露的 HTTP 接口是 http://host:port/status ，默认的端口号是 10080 （可以通过 &amp;ndash;status 参数设置），可以通过访问这个接口获取当前 TiDB Server 的状态，以及判断是否存活。返回结果是 Json 格式：
curl http://127.0.0.1:10080/status { connections: 0, version: &amp;#34;5.5.31-TiDB-1.0&amp;#34;, git_hash: &amp;#34;b99521846ff6f71f06e2d49a3f98fa1c1d93d91b&amp;#34; }  connection: 当前 TiDB Server 上的客户端连接数 version: TiDB 版本号 git_hash: TiDB 当前代码的 Git Hash  PD Server PD API 地址： http://${host}:${port}/pd/api/v1/${api_name}。
其中 port 默认为 2379，各类 api_name 详细信息参见 PD API Doc。</description>
    </item>
    
    <item>
      <title>TiDB-Binlog 部署方案</title>
      <link>https://pingcap.com/docs-cn/tools/tidb-binlog-kafka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tools/tidb-binlog-kafka/</guid>
      <description>TiDB-Binlog 部署方案 本文档介绍如何部署 Kafka 版本的 TiDB-Binlog。如需部署 local 版本的 TiDB-Binlog，可参考 local 版本的 TiDB-Binlog 部署文档。
TiDB-Binlog 简介 TiDB-Binlog 用于收集 TiDB 的 Binlog，并提供实时备份和同步功能的商业工具。
TiDB-Binlog 支持以下功能场景:
 数据同步：同步 TiDB 集群数据到其他数据库 实时备份和恢复：备份 TiDB 集群数据，同时可以用于 TiDB 集群故障时恢复  TiDB-Binlog 架构 首先介绍 TiDB-Binlog 的整体架构。
TiDB-Binlog 集群主要分为三个组件：
Pump Pump 是一个守护进程，在每个 TiDB 主机的后台运行。其主要功能是实时记录 TiDB 产生的 Binlog 并顺序写入 Kafka 中。
Drainer Drainer 从 Kafka 中收集 Binlog，并按照 TiDB 中事务的提交顺序转化为指定数据库兼容的 SQL 语句，最后同步到目的数据库或者写到顺序文件。
Kafka &amp;amp; ZooKeeper Kafka 集群用来存储由 Pump 写入的 Binlog 数据，并提供给 Drainer 进行读取。</description>
    </item>
    
    <item>
      <title>TiDB-Binlog 部署方案</title>
      <link>https://pingcap.com/docs-cn/tools/tidb-binlog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tools/tidb-binlog/</guid>
      <description>TiDB-Binlog 部署方案 TiDB-Binlog 简介 TiDB-Binlog 用于收集 TiDB 的 Binlog，并提供实时备份和同步功能的商业工具。
TiDB-Binlog 支持以下功能场景:
 数据同步: 同步 TiDB 集群数据到其他数据库 实时备份和恢复: 备份 TiDB 集群数据，同时可以用于 TiDB 集群故障时恢复  TiDB-Binlog 架构 首先介绍 TiDB-Binlog 的整体架构。
TiDB-Binlog 集群主要分为两个组件：
Pump Pump 是一个守护进程，在每个 TiDB 的主机上后台运行。他的主要功能是实时记录 TiDB 产生的 Binlog 并顺序写入磁盘文件
Drainer Drainer 从各个 Pump 节点收集 Binlog，并按照在 TiDB 中事务的提交顺序转化为指定数据库兼容的 SQL 语句，最后同步到目的数据库或者写到顺序文件
TiDB-Binlog 安装 下载官方 Binary  CentOS 7+
# 下载压缩包 wget http://download.pingcap.org/tidb-binlog-local-linux-amd64.tar.gz wget http://download.pingcap.org/tidb-binlog-local-linux-amd64.sha256 # 检查文件完整性，返回 ok 则正确 sha256sum -c tidb-binlog-local-linux-amd64.sha256 # 解开压缩包 tar -xzf tidb-binlog-local-linux-amd64.</description>
    </item>
    
    <item>
      <title>TiKV Control 使用说明</title>
      <link>https://pingcap.com/docs-cn/tools/tikv-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tools/tikv-control/</guid>
      <description>TiKV Control 使用说明 TiKV Control (tikv-ctl) 是随 TiKV 附带的一个简单的管理工具，以下简称 tikv-ctl。
在编译 TiKV 时，tikv-ctl 命令也会同时被编译出来，而通过 Ansible 部署的集群，在对应的 tidb-ansible/resources/bin 目录下也会有这个二进制文件。
通用参数 tikv-ctl 有两种运行模式：远程模式和本地模式。前者通过 --host 选项接受 TiKV 的服务地址作为参数，后者则需要 --db 选项来指定本地 TiKV 数据目录路径。以下如无特殊说明，所有命令都同时支持这两种模式。对于远程模式，如果 TiKV 启用了 SSL，则 tikv-ctl 也需要指定相关的证书文件，例如：
$ tikv-ctl --ca-path ca.pem --cert-path client.pem --key-path client-key.pem --host 127.0.0.1:21060 &amp;lt;subcommands&amp;gt; 某些情况下，tikv-ctl 与 PD 进行通信，而不与 TiKV 通信。此时你需要使用 --pd 选项而非 --host 选项，例如：
$ tikv-ctl --pd 127.0.0.1:2379 compact-cluster store:&amp;#34;127.0.0.1:20160&amp;#34; compact db:KV cf:default range:([], []) success! 除此之外，tikv-ctl 还有两个简单的命令 --to-hex 和 --to-escaped，用于对 key 的形式作简单的变换。一般使用 escaped 形式，示例如下：</description>
    </item>
    
    <item>
      <title>TiKV 性能参数调优</title>
      <link>https://pingcap.com/docs-cn/op-guide/tune-tikv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/tune-tikv/</guid>
      <description>TiKV 性能参数调优 本文档用于描述如何根据机器配置情况来调整 TiKV 的参数，使 TiKV 的性能达到最优。
TiKV 最底层使用的是 RocksDB 做为持久化存储，所以 TiKV 的很多性能相关的参数都是与 RocksDB 相关的。TiKV 使用了两个 RocksDB 实例，默认 RocksDB 实例存储 KV 数据，Raft RocksDB 实例（简称 RaftDB）存储 Raft 数据。
TiKV 使用了 RocksDB 的 Column Families 特性。
 默认 RocksDB 实例将 KV 数据存储在内部的 default、write 和 lock 3 个 CF 内。
 default CF 存储的是真正的数据，与其对应的参数位于 [rocksdb.defaultcf] 项中； write CF 存储的是数据的版本信息（MVCC）以及索引相关的数据，相关的参数位于 [rocksdb.writecf] 项中； lock CF 存储的是锁信息，系统使用默认参数。  Raft RocksDB 实例存储 Raft log。
 default CF 主要存储的是 Raft log，与其对应的参数位于 [raftdb.</description>
    </item>
    
    <item>
      <title>TiSpark 快速入门指南</title>
      <link>https://pingcap.com/docs-cn/tispark/tispark-quick-start-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tispark/tispark-quick-start-guide/</guid>
      <description>TiSpark 快速入门指南 为了让大家快速体验 TiSpark，通过 TiDB-Ansible 安装的 TiDB 集群中默认已集成 Spark、TiSpark jar 包及 TiSpark sample data。
部署信息  Spark 默认部署在 TiDB 实例部署目录下 spark 目录中 TiSpark jar 包默认部署在 Spark 部署目录 jars 文件夹下：
spark/jars/tispark-SNAPSHOT-jar-with-dependencies.jar
 TiSpark sample data 及导入脚本默认部署在 TiDB-Ansible 目录下：
tidb-ansible/resources/bin/tispark-sample-data
  环境准备 在 TiDB 实例上安装 JDK 在 Oracle JDK 官方下载页面  下载 JDK 1.8 当前最新版，本示例中下载的版本为 jdk-8u141-linux-x64.tar.gz。
解压并根据您的 JDK 部署目录设置环境变量， 编辑 ~/.bashrc 文件，比如：
export JAVA_HOME=/home/pingcap/jdk1.8.0_144 export PATH=$JAVA_HOME/bin:$PATH 验证 JDK 有效性：
$ java -version java version &amp;#34;1.</description>
    </item>
    
    <item>
      <title>TiSpark 用户指南</title>
      <link>https://pingcap.com/docs-cn/tispark/tispark-user-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tispark/tispark-user-guide/</guid>
      <description>TiSpark 用户指南 TiSpark 是 PingCAP 为解决用户复杂 OLAP 需求而推出的产品。它借助 Spark 平台，同时融合 TiKV 分布式集群的优势，和 TiDB 一起为用户一站式解决 HTAP (Hybrid Transactional/Analytical Processing) 的需求。TiSpark 依赖于 TiKV 集群和 Placement Driver (PD)，也需要你搭建一个 Spark 集群。
本文简单介绍如何部署和使用 TiSpark。本文假设你对 Spark 有基本认知。你可以参阅 Apache Spark 官网 了解 Spark 的相关信息。
概述 TiSpark 是将 Spark SQL 直接运行在分布式存储引擎 TiKV 上的 OLAP 解决方案。其架构图如下：
 TiSpark 深度整合了 Spark Catalyst 引擎, 可以对计算提供精确的控制，使 Spark 能够高效的读取 TiKV 中的数据，提供索引支持以实现高速的点查。 通过多种计算下推减少 Spark SQL 需要处理的数据大小，以加速查询；利用 TiDB 的内建的统计信息选择更优的查询计划。 从数据集群的角度看，TiSpark + TiDB 可以让用户无需进行脆弱和难以维护的 ETL，直接在同一个平台进行事务和分析两种工作，简化了系统架构和运维。 除此之外，用户借助 TiSpark 项目可以在 TiDB 上使用 Spark 生态圈提供的多种工具进行数据处理。例如，使用 TiSpark 进行数据分析和 ETL；使用 TiKV 作为机器学习的数据源；借助调度系统产生定时报表等等。  环境准备 现有 TiSpark 版本支持 Spark 2.</description>
    </item>
    
    <item>
      <title>Try TiDB</title>
      <link>https://pingcap.com/docs-cn/op-guide/try-tidb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/try-tidb/</guid>
      <description>Try TiDB TiDB 支持 SQL92 标准并兼容 MySQL 语法，目前已经实现了大多数常用的 MySQL 语法。用户可以直接使用现有的 MySQL 客户端连接。如果现有的业务已经基于 MySQL 开发，大多数情况不需要修改代码即可直接替换单机的 MySQL。
创建数据库 使用 CREATE DATABASE 语句可完成对数据库的创建, 创建命令的格式如下:
CREATE DATABASE 数据库名 [其他选项]; 例如我们需要创建一个名为 samp_db 的数据库, 在命令行下执行以下命令:
CREATE DATABASE IF NOT EXISTS samp_db; 查看 TiDB 中的所有数据库：
SHOW DATABASES; 删除数据库：
DROP DATABASE samp_db; 创建表 使用 CREATE TABLE + 表名 + 列名 + 数据类型 + 约束。具体例子如下：
CREATE TABLE person ( number INT(11), name VARCHAR(255), birthday DATE ); 如果表已存在，则使用关键词 IF NOT EXISTS 可以防止发生错误。</description>
    </item>
    
    <item>
      <title>与 MySQL 兼容性对比</title>
      <link>https://pingcap.com/docs-cn/sql/mysql-compatibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/mysql-compatibility/</guid>
      <description>与 MySQL 兼容性对比 TiDB 支持包括跨行事务、JOIN 及子查询在内的绝大多数 MySQL 5.7 的语法，用户可以直接使用现有的 MySQL 客户端连接。如果现有的业务已经基于 MySQL 开发，大多数情况不需要修改代码即可直接替换单机的 MySQL。
包括现有的大多数 MySQL 运维工具（如 PHPMyAdmin, Navicat, MySQL Workbench 等），以及备份恢复工具（如 mysqldump, mydumper/myloader）等都可以直接使用。
不过一些特性由于在分布式环境下没法很好的实现，目前暂时不支持或者是表现与 MySQL 有差异。
一些 MySQL 语法在 TiDB 中可以解析通过，但是不会做任何后续的处理，例如 Create Table 语句中 Engine 以及 Partition 选项，都是解析并忽略。更多兼容性差异请参考具体的文档。
不支持的特性  存储过程与函数 视图 触发器 事件 自定义函数 外键约束 全文索引 空间索引 非 utf8 字符集 增加主键 删除主键 SYS schema MySQL 追踪优化器  与 MySQL 有差异的特性 自增 ID TiDB 的自增 ID (Auto Increment ID) 只保证自增且唯一，并不保证连续分配。TiDB 目前采用批量分配的方式，所以如果在多台 TiDB 上同时插入数据，分配的自增 ID 会不连续。</description>
    </item>
    
    <item>
      <title>位函数和操作符</title>
      <link>https://pingcap.com/docs-cn/sql/bit-functions-and-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/bit-functions-and-operators/</guid>
      <description> 位函数和操作符 TiDB 中位函数和操作符的使用方法与 MySQL 基本一致，详情参见: Bit Functions and Operators。
位函数和操作符表
   函数和操作符名 功能描述     BIT_COUNT() 返回参数二进制表示中为 1 的个数   &amp;amp; 位与   ~ 按位取反   | 位或   0 位亦或   &amp;lt;&amp;lt; 左移   &amp;gt;&amp;gt; 右移    </description>
    </item>
    
    <item>
      <title>使用 Docker Compose 快速构建集群</title>
      <link>https://pingcap.com/docs-cn/op-guide/docker-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/docker-compose/</guid>
      <description>使用 Docker Compose 快速构建集群 本文档介绍如何在单机上通过 Docker Compose 快速一键部署一套 TiDB 测试集群。Docker Compose 可以通过一个 YAML 文件定义多个容器的应用服务，然后一键启动或停止。
 注：对于生产环境，不要使用 Docker Compose 进行部署，而应使用 Ansible 部署 TiDB 集群。
 准备环境 确保你的机器上已安装：
 Docker（17.06.0 及以上版本） Docker Compose Git  快速部署  下载 tidb-docker-compose
git clone https://github.com/pingcap/tidb-docker-compose.git 创建并启动集群
cd tidb-docker-compose &amp;amp;&amp;amp; docker-compose pull # Get the latest Docker images docker-compose up -d 访问集群
mysql -h 127.0.0.1 -P 4000 -u root 访问集群 Grafana 监控页面：http://localhost:3000 默认用户名和密码均为 admin。
集群数据可视化：http://localhost:8010</description>
    </item>
    
    <item>
      <title>使用 TiDB Ansible 升级 TiDB 集群</title>
      <link>https://pingcap.com/docs-cn/op-guide/ansible-deployment-rolling-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/ansible-deployment-rolling-update/</guid>
      <description>使用 TiDB Ansible 升级 TiDB 集群 滚动升级 TiDB 集群时，会串行关闭服务，更新服务 binary 和配置文件，再启动服务。在前端配置负载均衡的情况下，滚动升级期间不影响业务运行（最小环境 ：pd * 3 、tidb * 2、tikv * 3）。
 注：如果 TiDB 集群开启了 binlog，部署了 Pump 和 Drainer 服务，升级 TiDB 服务时会升级 Pump，请先停止 Drainer 服务再执行滚动升级操作。
 升级组件版本 跨大版本升级，必须更新 tidb-ansible，从 TiDB 1.0 升级到 TiDB 2.0，参考 TiDB 2.0 升级操作指南。小版本升级，也建议更新 tidb-ansible，以获取最新的配置文件模板、特性及 bug 修复。
自动下载 binary  修改 /home/tidb/tidb-ansible/inventory.ini 中的 tidb_version 参数值，指定需要升级的版本号，如从 v2.0.6 升级到 v2.0.7
tidb_version = v2.0.7  注：如果使用 master 分支的 tidb-ansible，tidb_version = latest 保持不变即可，latest 版本的 TiDB 安装包会每日更新。</description>
    </item>
    
    <item>
      <title>使用 TiDB Ansible 扩容缩容 TiDB 集群</title>
      <link>https://pingcap.com/docs-cn/op-guide/ansible-deployment-scale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/ansible-deployment-scale/</guid>
      <description>使用 TiDB Ansible 扩容缩容 TiDB 集群 TiDB 集群可以在不影响线上服务的情况下进行扩容和缩容。以下缩容示例中，被移除的节点没有混合部署其他服务；如果混合部署了其他服务，不能按如下操作。
假设拓扑结构如下所示：
   Name Host IP Services     node1 172.16.10.1 PD1   node2 172.16.10.2 PD2   node3 172.16.10.3 PD3, Monitor   node4 172.16.10.4 TiDB1   node5 172.16.10.5 TiDB2   node6 172.16.10.6 TiKV1   node7 172.16.10.7 TiKV2   node8 172.16.10.8 TiKV3   node9 172.16.10.9 TiKV4    扩容 TiDB/TiKV 节点 例如，如果要添加两个 TiDB 节点（node101、node102），IP 地址为 172.</description>
    </item>
    
    <item>
      <title>使用加密连接</title>
      <link>https://pingcap.com/docs-cn/sql/encrypted-connections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/encrypted-connections/</guid>
      <description>使用加密连接 TiDB 服务端默认采用非加密连接，因而具备监视信道流量能力的第三方可以知悉 TiDB 服务端与客户端之间发送和接受的数据，包括但不限于查询语句内容、查询结果等。若信道是不可信的，例如客户端是通过公网连接到 TiDB 服务端的，则非加密连接容易造成信息泄露，建议使用加密连接确保安全性。
TiDB 服务端支持启用基于 TLS（传输层安全）协议的加密连接，协议与 MySQL 加密连接一致，现有 MySQL 客户端如 MySQL 运维工具和 MySQL 驱动等能直接支持。TLS 的前身是 SSL，因而 TLS 有时也被称为 SSL，但由于 SSL 协议有已知安全漏洞，TiDB 实际上并未支持。TiDB 支持的 TLS/SSL 协议版本为 TLS 1.0、TLS 1.1、TLS 1.2。
使用加密连接后，连接将具有以下安全性质：
 保密性：流量明文无法被窃听； 完整性：流量明文无法被篡改； 身份验证（可选）：客户端和服务端能验证双方身份，避免中间人攻击。  TiDB 的加密连接支持默认是关闭的，必须在 TiDB 服务端通过配置开启加密连接的支持后，才能在客户端中使用加密连接。另外，与 MySQL 一致，TiDB 加密连接是以单个连接为单位的，并且是可选的，因而对于开启了加密连接支持的 TiDB 服务端，客户端既可以选择通过加密连接安全地连接到该 TiDB 服务端，也可以选择使用普通的非加密连接。大部分 MySQL 客户端默认不采用加密连接，因此一般还要显式地要求客户端使用加密连接。
简单来说，要使用加密连接必须同时满足以下两个条件：
 TiDB 服务端配置开启加密连接的支持 客户端指定使用加密连接  配置 TiDB 启用加密连接支持 在启动 TiDB 时，至少需要在配置文件中同时指定 ssl-cert 和 ssl-key 参数，才能使 TiDB 服务端接受加密连接。还可以指定 ssl-ca 参数进行客户端身份验证（请参见配置启用身份验证章节）。</description>
    </item>
    
    <item>
      <title>信息函数</title>
      <link>https://pingcap.com/docs-cn/sql/information-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/information-functions/</guid>
      <description> 信息函数 TiDB 中信息函数的使用方法与 MySQL 基本一致，详情参见：Information Functions。
信息函数表    函数名 功能描述     CONNECTION_ID() 返回当前连接的连接 ID (线程 ID)   CURRENT_USER(), CURRENT_USER 返回当前用户的用户名和主机名   DATABASE() 返回默认(当前)的数据库名   FOUND_ROWS() 该函数返回对于一个包含 LIMIT 的 SELECT 查询语句，在不包含 LIMIT 的情况下回返回的记录数   LAST_INSERT_ID() 返回最后一条 INSERT 语句中自增列的值   SCHEMA() 与 DATABASE() 同义   SESSION_USER() 与 USER() 同义   SYSTEM_USER() 与 USER() 同义   USER() 返回客户端提供的用户名和主机名   VERSION() 返回当前 MySQL 服务器的版本信息   TIDB_VERSION() 返回当前 TiDB 服务器的版本信息    </description>
    </item>
    
    <item>
      <title>关键字和保留字</title>
      <link>https://pingcap.com/docs-cn/sql/keywords-and-reserved-words/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/keywords-and-reserved-words/</guid>
      <description>关键字和保留字 关键字在 SQL 中有特殊的意义， 例如 SELECT，UPDATE，DELETE，在作为表名跟函数名的时候，需要特殊对待，例如作为表名，保留字需要被反引号包住：
mysql&amp;gt; CREATE TABLE select (a INT); ERROR 1105 (HY000): line 0 column 19 near &amp;#34; (a INT)&amp;#34; (total length 27) mysql&amp;gt; CREATE TABLE `select` (a INT); Query OK, 0 rows affected (0.09 sec) BEGIN 和 END 是关键字， 但不是保留字，所以不需要反引号：
mysql&amp;gt; CREATE TABLE `select` (BEGIN int, END int); Query OK, 0 rows affected (0.09 sec) 有一种特殊情况， 如果使用了限定符 .，那么也不需要用反引号：
mysql&amp;gt; CREATE TABLE test.select (BEGIN int, END int); Query OK, 0 rows affected (0.</description>
    </item>
    
    <item>
      <title>其他函数</title>
      <link>https://pingcap.com/docs-cn/sql/miscellaneous-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/miscellaneous-functions/</guid>
      <description> 其他函数    函数名 功能描述     ANY_VALUE() 在 ONLY_FULL_GROUP_BY 模式下，防止带有 GROUP BY 的语句报错   SLEEP() 休眠指定秒数   UUID() 返回通用唯一识别码 (UUID)   VALUES() 定义 INSERT 过程中要用到的值   INET_ATON() 将 IP 地址转换为数值   INET_NTOA() 将数值转换为 IP 地址   INET6_ATON() 将 IPv6 地址转换为数值    INET6_NTOA() 将数值转换为 IPv6 地址   IS_IPV4() 判断参数是否为 IPv4 地址   IS_IPV4_COMPAT() 判断参数是否为兼容 IPv4 的地址   IS_IPV4_MAPPED() 判断参数是否为 IPv4 映射的地址   IS_IPV6() 判断参数是否为 IPv6 地址   GET_LOCK()  获取命名锁，TiDB 出于兼容性支持这个函数，实际上不会做任何操作，这点和 MySQL 有区别   RELEASE_LOCK() 释放命名锁    </description>
    </item>
    
    <item>
      <title>函数和操作符概述</title>
      <link>https://pingcap.com/docs-cn/sql/functions-and-operators-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/functions-and-operators-reference/</guid>
      <description>函数和操作符概述 TiDB 中函数和操作符使用方法与 MySQL 基本一致，详情参见: Functions and Operators。
在 SQL 语句中，表达式可用于诸如 SELECT 语句的 ORDER BY 或 HAVING 子句，SELECT/DELETE/UPDATE 语句的 WHERE 子句，或 SET 语句之类的地方。
可使用字面值，列名，NULL，内置函数，操作符等来书写表达式。</description>
    </item>
    
    <item>
      <title>加密和压缩函数</title>
      <link>https://pingcap.com/docs-cn/sql/encryption-and-compression-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/encryption-and-compression-functions/</guid>
      <description> 加密和压缩函数    函数名 功能描述     MD5()  计算字符串的 MD5 校验和    PASSWORD() 计算并返回密码字符串   RANDOM_BYTES() 返回随机字节向量   SHA1(), SHA()  计算 SHA-1 160 位校验和    SHA2()  计算 SHA-2 校验和    AES_DECRYPT() 使用 AES 解密   AES_ENCRYPT() 使用 AES 加密   COMPRESS() 返回经过压缩的二进制字符串   UNCOMPRESS() 解压缩字符串   UNCOMPRESSED_LENGTH()  返回字符串解压后的长度   CREATE_ASYMMETRIC_PRIV_KEY() 创建私钥   CREATE_ASYMMETRIC_PUB_KEY() 创建公钥   CREATE_DH_PARAMETERS() 创建 DH 共享密钥   CREATE_DIGEST() 从字符串创建摘要   ASYMMETRIC_DECRYPT() 使用公钥或私钥解密密文   ASYMMETRIC_DERIVE() 从非对称密钥导出对称密钥   ASYMMETRIC_ENCRYPT() 使用公钥或私钥加密明文   ASYMMETRIC_SIGN() 从摘要创建签名   ASYMMETRIC_VERIFY() 验证签名字符串是否匹配摘要字符串    </description>
    </item>
    
    <item>
      <title>十六进制字面值</title>
      <link>https://pingcap.com/docs-cn/sql/literal-value-hex-decimal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/literal-value-hex-decimal/</guid>
      <description>十六进制字面值 十六进制字面值是有 X 和 0x 前缀的字符串，后接表示十六进制的数字。注意 0x 是大小写敏感的，不能表示为 0X。
例:
X&amp;#39;ac12&amp;#39; X&amp;#39;12AC&amp;#39; x&amp;#39;ac12&amp;#39; x&amp;#39;12AC&amp;#39; 0xac12 0x12AC 以下是不合法的十六进制字面值：
X&amp;#39;1z&amp;#39; (z 不是合法的十六进制值) 0X12AC (0X 必须用小写的 0x) 对于使用 X&#39;val&#39; 格式的十六进制字面值，val 必须要有一个数字，可以在前面补一个 0 来避免语法错误。
mysql&amp;gt; select X&amp;#39;aff&amp;#39;; ERROR 1105 (HY000): line 0 column 13 near &amp;#34;&amp;#34;hex literal: invalid hexadecimal format, must even numbers, but 3 (total length 13) mysql&amp;gt; select X&amp;#39;0aff&amp;#39;; +---------+ | X&amp;#39;0aff&amp;#39; | +---------+ | | +---------+ 1 row in set (0.</description>
    </item>
    
    <item>
      <title>参数解释</title>
      <link>https://pingcap.com/docs-cn/op-guide/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/configuration/</guid>
      <description>参数解释 TiDB -V  输出 TiDB 的版本 默认: &amp;ldquo;&amp;rdquo;  --config  配置文件 默认: &amp;ldquo;&amp;rdquo; 如果你指定了配置文件，TiDB 会首先读取配置文件的配置。然后如果对应的配置在命令行参数里面也存在，TiDB 就会使用命令行参数的配置来覆盖配置文件里面的。详细的配置项可以看看这里  --store  用来指定 TiDB 底层使用的存储引擎 默认: &amp;ldquo;mocktikv&amp;rdquo; 你可以选择 mocktikv&amp;rdquo; 或者 &amp;ldquo;tikv&amp;rdquo;。（mocktikv 是本地存储引擎，而 tikv 是一个分布式存储引擎）  --path  对于本地存储引擎 &amp;ldquo;mocktikv&amp;rdquo; 来说，path 指定的是实际的数据存放路径 对于 --store = tikv 时必须指定path，--store = mocktikv 时，如果不指定 path，会使用默认值。 对于 &amp;ldquo;TiKV&amp;rdquo; 存储引擎来说，path 指定的是实际的 PD 地址。假设我们在 192.168.100.113:2379, 192.168.100.114:2379 和 192.168.100.115:2379 上面部署了 PD，那么 path 为 &amp;ldquo;192.168.100.113:2379, 192.168.100.114:2379, 192.168.100.115:2379&amp;rdquo; 默认: &amp;ldquo;/tmp/tidb&amp;rdquo; 我们可以通过 tidb-server --store=mocktikv --path=&amp;quot;&amp;quot; 来启动一个纯内存引擎的 TiDB。  --advertise-address  登录 TiDB 的 IP 地址 默认: &amp;ldquo;&amp;rdquo; 这个 IP 地址必须确保用户和集群中的其他机器都能够访问到。  --host  TiDB 服务监听 host 默认: &amp;ldquo;0.</description>
    </item>
    
    <item>
      <title>备份与恢复</title>
      <link>https://pingcap.com/docs-cn/op-guide/backup-restore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/backup-restore/</guid>
      <description>备份与恢复 概述 该文档详细介绍了如何对 TiDB 进行备份恢复。本文档暂时只考虑全量备份与恢复。
这里我们假定 TiDB 服务信息如下：
   Name Address Port User Password     TiDB 127.0.0.1 4000 root *    在这个备份恢复过程中，我们会用到下面的工具：
 mydumper 从 TiDB 导出数据 loader 导入数据到 TiDB  下载 TiDB 工具集 (Linux) # 下载 tool 压缩包 wget http://download.pingcap.org/tidb-enterprise-tools-latest-linux-amd64.tar.gz wget http://download.pingcap.org/tidb-enterprise-tools-latest-linux-amd64.sha256 # 检查文件完整性，返回 ok 则正确 sha256sum -c tidb-enterprise-tools-latest-linux-amd64.sha256 # 解开压缩包 tar -xzf tidb-enterprise-tools-latest-linux-amd64.tar.gz cd tidb-enterprise-tools-latest-linux-amd64 使用 mydumper/loader 全量备份恢复数据 mydumper 是一个强大的数据备份工具，具体可以参考 https://github.</description>
    </item>
    
    <item>
      <title>字符串函数</title>
      <link>https://pingcap.com/docs-cn/sql/string-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/string-functions/</guid>
      <description> 字符串函数    函数名 功能描述     ASCII() 返回最左字符的数值   CHAR()  返回由整数的代码值所给出的字符组成的字符串    BIN() 返回一个数的二进制值的字符串表示   HEX() 返回十进制值或字符串值的十六进制表示   OCT() 返回一个数的八进制值的字符串表示   UNHEX() 返回 HEX 表示的数字所代表的字符串   TO_BASE64() 返回转换为 BASE64 的字符串参数   FROM_BASE64() 解码为 BASE64 的字符串并返回结果   LOWER() 返回小写字母的字符   LCASE() 与 LOWER() 功能相同   UPPER() 返回大写字母的字符   UCASE() 与 UPPER() 功能相同   LPAD()  返回左边由指定字符串填充的字符串参数    RPAD()  返回右边由指定字符串填充的字符串参数    TRIM() 删除字符串的前缀和后缀   LTRIM()  删除前面的空格字符    RTRIM() 删除结尾的空格字符   BIT_LENGTH()  返回字符串的位长度    CHAR_LENGTH()  返回字符串的字符长度    CHARACTER_LENGTH() 与 CHAR_LENGTH() 功能相同   LENGTH()  返回字符串的字节长度    OCTET_LENGTH() 与 LENGTH() 功能相同   INSERT() 在指定位置插入一个子字符串，直到指定的字符数   REPLACE() 替换指定的字符串   SUBSTR() 返回指定的子字符串   SUBSTRING() 返回指定的子字符串   SUBSTRING_INDEX() 返回最终定界符左边或右边的子字符串   MID() 返回从指定位置开始的子字符串   LEFT() 返回指定的最左字符   RIGHT() 返回指定的最右字符   INSTR() 返回子字符串的第一个出现位置   LOCATE() 返回子字符串的第一个出现位置，与 INSTR() 的参数位置相反   POSITION() 与 LOCATE() 功能相同   REPEAT() 返回重复指定次数的字符串   CONCAT() 返回连接的字符串   CONCAT_WS() 返回由分隔符连接的字符串   REVERSE() 返回和字符顺序相反的字符串   SPACE() 返回指定数目的空格组成的字符串   FIELD() 返回参数在后续参数中出现的第一个位置   ELT() 返回指定位置的字符串   EXPORT_SET()  返回一个字符串，其中值位中设置的每个位，可以得到一个 on 字符串，而每个未设置的位，可以得到一个 off 字符串    MAKE_SET()  返回一组逗号分隔的字符串，由位集合中具有相应位的字符串组成    FIND_IN_SET() 返回第一个参数在第二个参数中出现的位置   FORMAT() 返回指定小数位数格式的数字   ORD() 返回参数中最左字符的字符代码   QUOTE()  引用一个字符串，返回一个在 SQL 语句中可用作正确转义的数据值的结果     字符串比较函数    函数名 功能描述     LIKE 进行简单模式匹配   NOT LIKE 否定简单模式匹配   STRCMP() 比较两个字符串    正则表达式    表达式名 功能描述     REGEXP 使用正则表达式进行模式匹配   RLIKE 与 REGEXP 功能相同   NOT REGEXP 否定 REGEXP    </description>
    </item>
    
    <item>
      <title>字符集支持</title>
      <link>https://pingcap.com/docs-cn/sql/character-set-support/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/character-set-support/</guid>
      <description>字符集支持 名词解释，下面的阐述中会交错使用中文或者英文，请互相对照：
 Character Set：字符集 Collation：排序规则  目前 TiDB 支持以下字符集：
mysql&amp;gt; SHOW CHARACTER SET; +---------|---------------|-------------------|--------+ | Charset | Description | Default collation | Maxlen | +---------|---------------|-------------------|--------+ | utf8 | UTF-8 Unicode | utf8_bin | 3 | | utf8mb4 | UTF-8 Unicode | utf8mb4_bin | 4 | | ascii | US ASCII | ascii_bin | 1 | | latin1 | Latin1 | latin1_bin | 1 | | binary | binary | binary | 1 | +---------|---------------|-------------------|--------+ 5 rows in set (0.</description>
    </item>
    
    <item>
      <title>字符集配置</title>
      <link>https://pingcap.com/docs-cn/sql/character-set-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/character-set-configuration/</guid>
      <description>字符集配置 目前，TiDB 只支持 utf8 字符集，相当于 MySQL 中的 utf8mb4。MySQL 5.7 的默认字符集为 latin1。关于 TiDB 与 MySQL 字符集的区别，在默认设置的区别中有相关说明。
更多细节。</description>
    </item>
    
    <item>
      <title>字面值</title>
      <link>https://pingcap.com/docs-cn/sql/literal-values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/literal-values/</guid>
      <description>字面值 String Literals String Literals 是一个 bytes 或者 characters 的序列，两端被单引号 &#39; 或者双引号 &amp;quot; 包围，例如：
&amp;#39;example string&amp;#39; &amp;#34;example string&amp;#34; 如果字符串是连续的，会被合并为一个独立的 string。以下表示是一样的：
&amp;#39;a string&amp;#39; &amp;#39;a&amp;#39; &amp;#39; &amp;#39; &amp;#39;string&amp;#39; &amp;#34;a&amp;#34; &amp;#39; &amp;#39; &amp;#34;string&amp;#34; 如果 ANSI_QUOTES SQL MODE 开启了，那么只有单引号内的会被认为是 String Literals，对于双引号内的字符串，会被认为是一个 identifier。
binary string 是一串 bytes 组成的字符串，每一个 binary string 有一个叫做 binary 的 character set 和 collation。一个非二进制的字符串是一个由字符组成的字符串，它有除 binary 外的 character set和与之兼容的 collation。
对于两种字符串类型，比较都是基于每个字符的数值。对于 binary string 而言，比较单元就是字节，对于非二进制的字符串，那么单元就是字符，而有的字符集支持多字节字符。
一个 String Literal 可以拥有一个可选的 character set introducer 和 COLLATE clause，可以用来指派特定的字符集跟 collation（TiDB 对此只是做了语法上的兼容，并不实质做处理)。</description>
    </item>
    
    <item>
      <title>实用工具语句</title>
      <link>https://pingcap.com/docs-cn/sql/util/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/util/</guid>
      <description>实用工具语句 DESCRIBE 语句 DESCRIBE 和 EXPLAIN 是同义词，另外还可以缩写为 DESC。请参考 EXPLAIN 语句的用法。
EXPLAIN 语句 {EXPLAIN | DESCRIBE | DESC} tbl_name [col_name] {EXPLAIN | DESCRIBE | DESC} [explain_type] explainable_stmt explain_type: FORMAT = format_name format_name: &amp;#34;DOT&amp;#34; explainable_stmt: { SELECT statement | DELETE statement | INSERT statement | REPLACE statement | UPDATE statement } EXPLAIN 语句详细信息参考理解 TiDB 执行计划章节。
除了 MySQL 标准的结果格式之外，TiDB 还支持输出 DotGraph 结果，这时需要指定 FORMAT = &amp;quot;dot&amp;quot;，示例如下：
create table t(a bigint, b bigint); desc format = &amp;#34;dot&amp;#34; select A.</description>
    </item>
    
    <item>
      <title>开启 TLS 验证</title>
      <link>https://pingcap.com/docs-cn/op-guide/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/security/</guid>
      <description>开启 TLS 验证 概述 本文档介绍 TiDB 集群如何开启 TLS 验证，其支持：
 TiDB 组件之间的双向验证，包括 TiDB、TiKV、PD 相互之间，TiKV Control 与 TiKV、PD Control 与 PD 的双向认证，以及 TiKV peer 之间、PD peer 之间。一旦开启，所有组件之间均使用验证，不支持只开启某一部分的验证。 MySQL Client 与 TiDB 之间的客户端对服务器身份的单向验证以及双向验证。  MySQL Client 与 TiDB 之间使用一套证书，TiDB 集群组件之间使用另外一套证书。
TiDB 集群组件间开启 TLS（双向认证） 准备证书 推荐为 TiDB、TiKV、PD 分别准备一个 server 证书，并保证可以相互验证，而它们的各种客户端共用 client 证书。
有多种工具可以生成自签名证书，如 openssl，easy-rsa，cfssl。
这里提供一个使用 cfssl 生成证书的示例：生成自签名证书。
配置证书 TiDB 在 config 文件或命令行参数中设置：
[security] # Path of file that contains list of trusted SSL CAs for connection with cluster components.</description>
    </item>
    
    <item>
      <title>慢查询日志</title>
      <link>https://pingcap.com/docs-cn/sql/slow-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/slow-query/</guid>
      <description>慢查询日志 一条不合理的 SQL 语句会导致整个集群压力增大，响应变慢。对于这种问题，我们需要用慢查询日志来定位有问题的语句，解决性能问题。
获取日志 通过在 TiDB 的日志文件上 grep SLOW_QUERY 这个关键字，可以得到执行时间超过 slow-threshold 的语句日志。
slow-threshold 可以通过配置文件修改，默认是 300ms。如果配置了 slow-query-file，慢查询日志会全部写在这个文件里。
示例 2018/08/20 19:52:08.632 adapter.go:363: [warning] [SLOW_QUERY] cost_time:18.647928814s process_time:1m6.768s wait_time:12m11.212s backoff_time:600ms request_count:2058 total_keys:1869712 processed_keys:1869710 succ:true con:3 user:root@127.0.0.1 txn_start_ts:402329674704224261 database:test table_ids:[31],index_ids:[1], sql:select count(c) from sbtest1 use index (k_1) 字段解析 cost_time 表示执行这个语句花费的时间。只有执行时间超过 slow-threshold 的语句才会输出这个日志。
process_time 表示这个语句在 TiKV 的处理时间之和，因为数据会并行的发到 TiKV 执行，这个值可能会超过 cost_time。
wait_time 表示这个语句在 TiKV 的等待时间之和，因为 TiKV 的 Coprocessor 线程数是有限的，当所有的 Coprocessor 线程都在工作的时候，请求会排队，当队列中有某些请求耗时很长的时候，后面的请求的等待时间都会增加。
backoff_time 表示语句遇到需要重试的错误时在重试前等待的时间，常见的需要重试的错误有以下几种：遇到了 lock、Region 分裂、tikv server is busy。</description>
    </item>
    
    <item>
      <title>控制流程函数</title>
      <link>https://pingcap.com/docs-cn/sql/control-flow-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/control-flow-functions/</guid>
      <description> 控制流程函数    函数名 功能描述     CASE Case 操作符   IF() 构建 if/else   IFNULL() 构建 Null if/else   NULLIF() 如果 expr1 = expr2，返回 NULL    </description>
    </item>
    
    <item>
      <title>操作符</title>
      <link>https://pingcap.com/docs-cn/sql/operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/operators/</guid>
      <description>操作符    操作符名 功能描述     AND, &amp;amp;&amp;amp; 逻辑与   = 赋值 (可用于 SET 语句中, 或用于 UPDATE 语句的 SET 中 )   := 赋值   BETWEEN ... AND ... 判断值满足范围   BINARY 将一个字符串转换为一个二进制字符串   &amp;amp; 位与   ~ 位非   \| 位或   ^ 按位异或   CASE case 操作符   DIV 整数除   / 除法   = 相等比较   &amp;lt;=&amp;gt; 空值安全型相等比较   &amp;gt; 大于   &amp;gt;= 大于或等于   IS 判断一个值是否等于一个布尔值   IS NOT 判断一个值是否不等于一个布尔值   IS NOT NULL 非空判断   IS NULL 空值判断   &amp;lt;&amp;lt; 左移   &amp;lt; 小于   &amp;lt;= 小于或等于   LIKE 简单模式匹配   - 减   %, MOD 求余   NOT, !</description>
    </item>
    
    <item>
      <title>数值函数与操作符</title>
      <link>https://pingcap.com/docs-cn/sql/numeric-functions-and-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/numeric-functions-and-operators/</guid>
      <description> 数值函数与操作符 算术操作符    操作符名 功能描述     + 加号   - 减号   * 乘号   / 除号   DIV 整数除法   %, MOD 模运算，取余   - 更改参数符号    数学函数    函数名 功能描述     POW() 返回参数的指定乘方的结果值   POWER() 返回参数的指定乘方的结果值   EXP() 返回 e（自然对数的底）的指定乘方后的值   SQRT() 返回非负数的二次方根   LN() 返回参数的自然对数   LOG() 返回第一个参数的自然对数   LOG2() 返回参数以 2 为底的对数   LOG10() 返回参数以 10 为底的对数   PI() 返回 pi 的值   TAN() 返回参数的正切值   COT() 返回参数的余切值   SIN() 返回参数的正弦值   COS() 返回参数的余弦值   ATAN() 返回参数的反正切值   ATAN2(), ATAN() 返回两个参数的反正切值   ASIN() 返回参数的反正弦值   ACOS() 返回参数的反余弦值   RADIANS() 返回由度转化为弧度的参数   DEGREES() 返回由弧度转化为度的参数   MOD() 返回余数   ABS() 返回参数的绝对值   CEIL() 返回不小于参数的最小整数值   CEILING() 返回不小于参数的最小整数值   FLOOR() 返回不大于参数的最大整数值   ROUND() 返回参数最近似的整数或指定小数位数的数值   RAND() 返回一个随机浮点值   SIGN() 返回参数的符号   CONV() 不同数基间转换数字，返回数字的字符串表示   TRUNCATE() 返回被舍位至指定小数位数的数字   CRC32()  计算循环冗余码校验值并返回一个 32 位无符号值     </description>
    </item>
    
    <item>
      <title>数据定义语言</title>
      <link>https://pingcap.com/docs-cn/sql/ddl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/ddl/</guid>
      <description>数据定义语言 DDL（Data Definition Language）用于定义和管理数据库以及数据库中各种对象的语句。
CREATE DATABASE 语法 CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name [create_specification] ... create_specification: [DEFAULT] CHARACTER SET [=] charset_name | [DEFAULT] COLLATE [=] collation_name CREATE DATABASE 用于创建数据库，并可以指定数据库的默认属性（如数据库默认字符集,校验规则。CREATE SCHEMA 跟 CREATE DATABASE 操作效果一样。
当创建已存在的数据库且不指定使用 IF NOT EXISTS 时会报错。
create_specification 选项用于指定数据库具体的 CHARACTER SET 和 COLLATE。目前这个选项只是语法支持。
DROP DATABASE 语法 DROP {DATABASE | SCHEMA} [IF EXISTS] db_name DROP DATABASE 用于删除指定数据库以及它其中的所用表格。
IF EXISTS 用于防止当数据库不存在时发生错误。
CREATE TABLE 语法 CREATE TABLE [IF NOT EXISTS] tbl_name (create_definition,.</description>
    </item>
    
    <item>
      <title>数据库管理语句</title>
      <link>https://pingcap.com/docs-cn/sql/admin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/admin/</guid>
      <description>数据库管理语句 TiDB 可以通过一些语句对数据库进行管理，包括设置权限、修改系统变量、查询数据库状态。
权限管理 参考权限管理文档。
SET 语句 SET 语句有多种作用和形式：
设置变量值 SET variable_assignment [, variable_assignment] ... variable_assignment: user_var_name = expr | param_name = expr | local_var_name = expr | [GLOBAL | SESSION] system_var_name = expr | [@@global. | @@session. | @@] system_var_name = expr 这种语法可以设置 TiDB 的变量值，包括系统变量以及用户定义变量。对于用户自定义变量，都是会话范围的变量；对于系统变量，通过 @@global. 或者是 GLOBAL 设置的变量为全局范围变量，否则为会话范围变量，具体参考系统变量一章。
SET CHARACTER 语句和 SET NAMES SET {CHARACTER SET | CHARSET} {&amp;#39;charset_name&amp;#39; | DEFAULT} SET NAMES {&amp;#39;charset_name&amp;#39; [COLLATE &amp;#39;collation_name&amp;#39;] | DEFAULT} 这个语句设置这三个会话范围的系统变量：character_set_client，character_set_results，character_set_connection 设置为给定的字符集。目前 character_set_connection 变量的值和 MySQL 有所区别，MySQL 将其设置为 character_set_database 的值。</description>
    </item>
    
    <item>
      <title>数据操作语言</title>
      <link>https://pingcap.com/docs-cn/sql/dml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/dml/</guid>
      <description>TiDB 数据操作语言 数据操作语言 (Data Manipulation Language, DML) 用于帮助用户实现对数据库的基本操作，比如查询、写入、删除和修改数据库中的数据。
TiDB 支持的数据操作语言包括 Select，Insert，Delete，Update 和 Replace。
Select 语句 Select 语句用于从数据库中查询数据。
语法定义 SELECT [ALL | DISTINCT | DISTINCTROW ] [HIGH_PRIORITY] [STRAIGHT_JOIN] [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS] select_expr [, select_expr ...] [FROM table_references [WHERE where_condition] [GROUP BY {col_name | expr | position} [ASC | DESC], ...] [HAVING where_condition] [ORDER BY {col_name | expr | position} [ASC | DESC], ...] [LIMIT {[offset,] row_count | row_count OFFSET offset}] [FOR UPDATE | LOCK IN SHARE MODE]] 语法元素说明    语法元素 说明     ALL、DISTINCT、DISTINCTROW 查询结果集中可能会包含重复值。指定 DISTINCT/DISTINCTROW 则在查询结果中过滤掉重复的行；指定 ALL 则列出所有的行。默认为 ALL。   HIGH_PRIORITY 该语句为高优先级语句，TiDB 在执行阶段会优先处理这条语句   SQL_CACHE、SQL_NO_CACHE、SQL_CALC_FOUND_ROWS TiDB 出于兼容性解析这三个语法，但是不做任何处理   STRAIGHT_JOIN STRAIGHT_JOIN 会强制优化器按照 FROM 子句中所使用的表的顺序做联合查询。当优化器选择的 Join 顺序并不优秀时，你可以使用这个语法来加速查询的执行   select_expr 投影操作列表，一般包括列名、表达式，或者是用 &amp;lsquo;*&amp;rsquo; 表示全部列   FROM table_references 表示数据来源，数据来源可以是一个表（select * from t;）或者是多个表 (select * from t1 join t2;) 或者是0个表 (select 1+1 from dual;, 等价于 select 1+1;)   WHERE where_condition Where 子句用于设置过滤条件，查询结果中只会包含满足条件的数据   GROUP BY GroupBy 子句用于对查询结果集进行分组   HAVING where_condition Having 子句与 Where 子句作用类似，Having 子句可以让过滤 GroupBy 后的各种数据，Where 子句用于在聚合前过滤记录。   ORDER BY OrderBy 子句用于指定结果排序顺序，可以按照列、表达式或者是 select_expr 列表中某个位置的字段进行排序。   LIMIT Limit 子句用于限制结果条数。Limit 接受一个或两个数字参数，如果只有一个参数，那么表示返回数据的最大行数；如果是两个参数，那么第一个参数表示返回数据的第一行的偏移量（第一行数据的偏移量是 0），第二个参数指定返回数据的最大条目数。   FOR UPDATE 对查询结果集所有数据上读锁，以监测其他事务对这些的并发修改。TiDB 使用乐观事务模型在语句执行期间不会检测锁冲突，在事务的提交阶段才会检测事务冲突，如果执行 Select For Update 期间，有其他事务修改相关的数据，那么包含 Select For Update 语句的事务会提交失败。   LOCK IN SHARE MODE TiDB 出于兼容性解析这个语法，但是不做任何处理    Insert 语句 Insert 语句用于向数据库中插入数据，TiDB 兼容 MySQL Insert 语句的所有语法。</description>
    </item>
    
    <item>
      <title>数据迁移</title>
      <link>https://pingcap.com/docs-cn/op-guide/migration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/migration/</guid>
      <description>数据迁移 使用 mydumper/loader 全量导入数据 mydumper 是一个更强大的数据迁移工具，具体可以参考 https://github.com/maxbube/mydumper。
你可以使用 mydumper 从 MySQL 导出数据，然后用 loader 将其导入到 TiDB 里面。
 注意：虽然 TiDB 也支持使用 MySQL 官方的 mysqldump 工具来进行数据的迁移工作，但相比于 mydumper / loader，性能会慢很多，大量数据的迁移会花费很多时间，这里我们并不推荐。
 mydumper/loader 全量导入数据最佳实践 为了快速的迁移数据 (特别是数据量巨大的库)，可以参考下面建议
 mydumper 导出数据至少要拥有 SELECT，RELOAD，LOCK TABLES 权限 使用 mydumper 导出来的数据文件尽可能的小，最好不要超过 64M，可以设置参数 -F 64 loader的 -t 参数可以根据 tikv 的实例个数以及负载进行评估调整，例如 3个 tikv 的场景，此值可以设为 3 *（1 ～ n)；当 tikv 负载过高，loader 以及 tidb 日志中出现大量 backoffer.maxSleep 15000ms is exceeded 可以适当调小该值，当 tikv 负载不是太高的时候，可以适当调大该值。  某次导入示例，以及相关的配置  mydumper 导出后总数据量 214G，单表 8 列，20 亿行数据 集群拓扑  TIKV * 12 TIDB * 4 PD * 3  mydumper -F 设置为 16, loader -t 参数 64  结果：导入时间 11 小时左右，19.</description>
    </item>
    
    <item>
      <title>数据迁移概述</title>
      <link>https://pingcap.com/docs-cn/op-guide/migration-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/migration-overview/</guid>
      <description>数据迁移概述 概述 该文档详细介绍了如何将 MySQL 的数据迁移到 TiDB。
这里我们假定 MySQL 以及 TiDB 服务信息如下：
   Name Address Port User Password     MySQL 127.0.0.1 3306 root *   TiDB 127.0.0.1 4000 root *    在这个数据迁移过程中，我们会用到下面四个工具:
 checker 检查 schema 能否被 TiDB 兼容 mydumper 从 MySQL 导出数据 loader 导入数据到 TiDB syncer 增量同步 MySQL 数据到 TiDB  两种迁移场景  第一种场景：只全量导入历史数据 （需要 checker + mydumper + loader）； 第二种场景：全量导入历史数据后，通过增量的方式同步新的数据 （需要 checker + mydumper + loader + syncer）。该场景需要提前开启 binlog 且格式必须为 ROW。  MySQL 开启 binlog 注意： 只有上文提到的第二种场景才需要在 dump 数据之前先开启 binlog</description>
    </item>
    
    <item>
      <title>新版 TiDB-Binlog 部署方案</title>
      <link>https://pingcap.com/docs-cn/tools/new-tidb-binlog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tools/new-tidb-binlog/</guid>
      <description>新版 TiDB-Binlog 部署方案  新版 TiDB-Binlog 尚未发布正式版，本文档用于测试环境部署。
 使用 tidb-ansible 部署 TiDB-Binlog 下载 tidb-ansible 以 tidb 用户登录中控机并进入 /home/tidb 目录，使用以下命令 tidb-ansible new-tidb-binlog 分支，默认的文件夹名称为 tidb-ansible。
$ git clone -b new-tidb-binlog https://github.com/pingcap/tidb-ansible.git 部署 pump 修改 tidb-ansible/inventory.ini 文件  设置 enable_binlog = True，表示 TiDB 集群开启 binlog。  ## binlog trigger enable_binlog = True  为 pump_servers 主机组添加部署机器 IP。  ## Binlog Part [pump_servers] 172.16.10.72 172.16.10.73 172.16.10.74 默认 pump 保留 5 天数据，如需修改可修改 tidb-ansible/conf/pump.yml 文件中 gc 变量值，并取消注释，如修改为 7。</description>
    </item>
    
    <item>
      <title>日期和时间函数</title>
      <link>https://pingcap.com/docs-cn/sql/date-and-time-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/date-and-time-functions/</guid>
      <description> 日期和时间函数 TiDB 中日期和时间函数的使用方法与 MySQL 基本一致，详情参见: Date and Time Functions.
日期时间函数表    函数名 功能描述     ADDDATE() 将时间间隔添加到日期上   ADDTIME() 时间数值相加   CONVERT_TZ() 转换时区   CURDATE() 返回当前日期   CURRENT_DATE(), CURRENT_DATE 与 CURDATE() 同义   CURRENT_TIME(), CURRENT_TIME 与 CURTIME() 同义   CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP 与 NOW() 同义   CURTIME() 返回当前时间   DATE() 从日期或日期/时间表达式中提取日期部分   DATE_ADD() 将时间间隔添加到日期上   DATE_FORMAT() 返回满足指定格式的日期/时间   DATE_SUB() 从日期减去指定的时间间隔   DATEDIFF() 返回两个日期间隔的天数   DAY() 与 DAYOFMONTH() 同义   DAYNAME() 返回星期名称   DAYOFMONTH() 返回参数对应的天数部分(1-31)   DAYOFWEEK() 返回参数对应的星期下标   DAYOFYEAR() 返回参数代表一年的哪一天 (1-366)   EXTRACT() 提取日期/时间中的单独部分   FROM_DAYS() 将天数转化为日期   FROM_UNIXTIME() 将 Unix 时间戳格式化为日期   GET_FORMAT() 返回满足日期格式的字符串   HOUR() 提取日期/时间表达式中的小时部分   LAST_DAY 返回参数中月份的最后一天   LOCALTIME(), LOCALTIME 与 NOW() 同义   LOCALTIMESTAMP, LOCALTIMESTAMP() 与 NOW() 同义   MAKEDATE() 根据给定的年份和一年中的天数生成一个日期   MAKETIME() 根据给定的时、分、秒生成一个时间   MICROSECOND() 返回参数的微秒部分   MINUTE() 返回参数的分钟部分   MONTH() 返回参数的月份部分   MONTHNAME() 返回参数的月份名称   NOW() 返回当前日期和时间   PERIOD_ADD() 在年-月表达式上添加一段时间(数个月)   PERIOD_DIFF() 返回间隔的月数   QUARTER() 返回参数对应的季度(1-4)   SEC_TO_TIME() 将秒数转化为 &amp;lsquo;HH:MM:SS&amp;rsquo; 的格式   SECOND() 返回秒数(0-59)   STR_TO_DATE() 将字符串转化为日期   SUBDATE() 当传入三个参数时作为 DATE_SUB() 的同义   SUBTIME() 从一个时间中减去一段时间   SYSDATE() 返回该方法执行时的时间   TIME() 返回参数的时间表达式部分   TIME_FORMAT() 格式化时间   TIME_TO_SEC() 返回参数对应的秒数   TIMEDIFF() 返回时间间隔   TIMESTAMP() 传入一个参数时候,该方法返回日期或日期/时间表达式, 传入两个参数时候, 返回参数的和   TIMESTAMPADD() 在日期/时间表达式上增加一段时间间隔   TIMESTAMPDIFF() 从日期/时间表达式中减去一段时间间隔   TO_DAYS() 将参数转化对应的天数(从第 0 年开始)   TO_SECONDS() 将日期或日期/时间参数转化为秒数(从第 0 年开始)   UNIX_TIMESTAMP() 返回一个 Unix 时间戳   UTC_DATE() 返回当前的 UTC 日期   UTC_TIME() 返回当前的 UTC 时间   UTC_TIMESTAMP() 返回当前的 UTC 日期和时间   WEEK() 返回参数所在的一年中的星期数   WEEKDAY() 返回星期下标   WEEKOFYEAR() 返回参数在日历中对应的一年中的星期数   YEAR() 返回参数对应的年数   YEARWEEK() 返回年数和星期数    </description>
    </item>
    
    <item>
      <title>日期和时间类型</title>
      <link>https://pingcap.com/docs-cn/sql/date-and-time-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/date-and-time-types/</guid>
      <description>日期和时间类型 用于表示日期和时间类型的值是 DATE，TIME，DATETIME，TIMESTAMP 和 YEAR。每一种类型都有自己的有效值的范围，也有一个零值用于表示它是一个无效的值。TIMESTAMP 类型有个自动更新的行为，后面介绍。
处理日期和时间类型时，请记住下面这些：
 尽管 TiDB 尝试解释不同的格式，日期部分必须是按 年-月-日 的顺序（比如，&amp;rsquo;98-09-04&amp;rsquo;），而不是 月-日-年 或者 日-月-年 的顺序。 日期值中包含两位数字的年份是有歧义的，TiDB 按下面规则解释：  范围在 70-99 之间的被转换成 1970-1999 范围在 00-69 之间的被转换成 2000-2069  如果上下文里面需要的是一个数值，TiDB 自动将日期或时间值转换成数值类型，反之亦然。 如果 TiDB 遇到一个日期或时间值是超过表示范围的，或者无效的，会自动将它转换为该类型的零值。 设置不同的 SQL mode 可以改变 TiDB 的行为。 TiDB 允许 DATE 和 DATETIME 列中出现月份或者日为零的值，比如 &amp;lsquo;2009-00-00&amp;rsquo; 或 &amp;lsquo;2009-01-00&amp;rsquo;。如果这种日期参与计算，比如函数 DATE_SUB() 或者 DATE_ADD()，得到的结果可能会不正确。 TiDB 允许存储零值 &amp;lsquo;0000-00-00&amp;rsquo;，有时候这会比 NULL 值更方便一些。  下面的表格里面显示了不同类型的零值：
   Date Type &amp;ldquo;Zero&amp;rdquo; Value     DATE &amp;lsquo;0000-00-00&amp;rsquo;   TIME &amp;lsquo;00:00:00&amp;rsquo;   DATETIME &amp;lsquo;0000-00-00 00:00:00&amp;rsquo;   TIMESTAMP &amp;lsquo;0000-00-00 00:00:00&amp;rsquo;   YEAR 0000    DATE，DATETIME 和 TIMESTAMP 类型 DATE，DATETIME，TIMESTAMP 类型都是相关的。这里描述它们的共同点和区别。</description>
    </item>
    
    <item>
      <title>时区支持</title>
      <link>https://pingcap.com/docs-cn/sql/time-zone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/time-zone/</guid>
      <description>时区支持 TiDB 使用的时区由 time_zone 全局变量和 session 变量决定。time_zone 的默认值是 System，System 对应的实际时区在 TiDB 集群 bootstrap 初始化时设置。具体逻辑如下:
 优先使用 TZ 环境变量 如果失败，则从 /etc/localtime 的实际软链地址提取。 如果上面两种都失败则使用 UTC 作为系统时区。  在运行过程中可以修改全局时区：
mysql&amp;gt; SET GLOBAL time_zone = timezone; TiDB 还可以通过设置 session 变量 time_zone 为每个连接维护各自的时区。默认条件下，这个值取的是全局变量 time_zone 的值。修改 session 使用的时区：
mysql&amp;gt; SET time_zone = timezone; 查看当前使用的时区的值：
mysql&amp;gt; SELECT @@global.time_zone, @@session.time_zone; 设置 time_zone 的值的格式：
 &amp;lsquo;SYSTEM&amp;rsquo; 表明使用系统时间 相对于 UTC 时间的偏移，比如 &amp;lsquo;+10:00&amp;rsquo; 或者 &amp;lsquo;-6:00&amp;rsquo; 某个时区的名字，比如 &amp;lsquo;Europe/Helsinki&amp;rsquo;， &amp;lsquo;US/Eastern&amp;rsquo; 或 &amp;lsquo;MET&amp;rsquo;  NOW() 和 CURTIME() 的返回值都受到时区设置的影响。</description>
    </item>
    
    <item>
      <title>权限管理</title>
      <link>https://pingcap.com/docs-cn/sql/privilege/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/privilege/</guid>
      <description>权限管理 权限管理概述 TiDB的权限管理系统是按照 MySQL 的权限管理进行实现，大部分的 MySQL 的语法和权限类型都是支持的。如果发现行为跟 MySQL 不一致的地方，欢迎报告 issue。
示例 用户账户操作 更改密码 set password for &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; = &amp;#39;xxx&amp;#39;; 添加用户 create user &amp;#39;test&amp;#39;@&amp;#39;127.0.0.1&amp;#39; identified by &amp;#39;xxx&amp;#39;; 用户名是大小写敏感的。host则支持模糊匹配，比如：
create user &amp;#39;test&amp;#39;@&amp;#39;192.168.10.%&amp;#39;; 允许 test 用户从 192.168.10 子网的任何一个主机登陆。
如果没有指定 host，则默认是所有 IP 均可登陆。如果没有指定密码，默认为空：
create user &amp;#39;test&amp;#39;; 等价于
create user &amp;#39;test&amp;#39;@&amp;#39;%&amp;#39; identified by &amp;#39;&amp;#39;; 删除用户 drop user &amp;#39;test&amp;#39;@&amp;#39;%&amp;#39;; 这个操作会清除用户在 mysql.user 表里面的记录项，并且清除在授权表里面的相关记录。
忘记root密码 使用一个特殊的启动参数启动 TiDB（需要root权限）：
sudo ./tidb-server -skip-grant-table=true 这个参数启动，TiDB 会跳过权限系统，然后使用 root 登陆以后修改密码：
mysql -h 127.0.0.1 -P 4000 -u root 权限相关操作 授予权限 授予 xxx 用户对数据库 test 的读权限：</description>
    </item>
    
    <item>
      <title>注释语法</title>
      <link>https://pingcap.com/docs-cn/sql/comment-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/comment-syntax/</guid>
      <description>注释语法 TiDB 支持三种注释风格：
 用 # 注释一行 用 -- 注释一行，用 -- 注释必须要在其之后留出至少一个空格。 用 /* */ 注释一块，可以注释多行。  例：
mysql&amp;gt; SELECT 1+1; # This comment continues to the end of line +------+ | 1+1 | +------+ | 2 | +------+ 1 row in set (0.00 sec) mysql&amp;gt; SELECT 1+1; -- This comment continues to the end of line +------+ | 1+1 | +------+ | 2 | +------+ 1 row in set (0.</description>
    </item>
    
    <item>
      <title>理解 TiDB 执行计划</title>
      <link>https://pingcap.com/docs-cn/sql/understanding-the-query-execution-plan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/understanding-the-query-execution-plan/</guid>
      <description>理解 TiDB 执行计划 TiDB 优化器会根据当前数据表的实际情况来选择最优的执行计划，执行计划由一系列的 operator 构成。本文将详细解释 TiDB 中 EXPLAIN 语句返回的执行计划信息。
使用 EXPLAIN 来优化 SQL 语句 EXPLAIN 语句的返回结果提供了 TiDB 执行 SQL 查询的详细信息：
 EXPLAIN 可以和 SELECT，DELETE，INSERT，REPLACE，以及 UPDATE 语句一起使用； 执行 EXPLAIN，TiDB 会返回被 EXPLAIN 的 SQL 语句经过优化器后的最终物理执行计划。也就是说，EXPLAIN 展示了 TiDB 执行该 SQL 语句的完整信息，比如以什么样的顺序，什么方式 JOIN 两个表，表达式树长什么样等等。详见 EXPLAIN 输出格式； TiDB 目前还不支持 EXPLAIN [options] FOR CONNECTION connection_id，将在未来支持它，详见 #4351；  通过观察 EXPLAIN 的结果，你可以知道如何给数据表添加索引使得执行计划使用索引从而加速 SQL 语句的执行速度；你也可以使用 EXPLAIN 来检查优化器是否选择了最优的顺序来 JOIN 数据表。
EXPLAIN 输出格式 目前 TiDB 的 EXPLAIN 会输出 4 列，分别是：id，count，task，operator info。执行计划中每个 operator 都由这 4 列属性来描述，EXPLAIN 结果中每一行描述一个 operator。每个属性的具体含义如下：</description>
    </item>
    
    <item>
      <title>生成自签名证书</title>
      <link>https://pingcap.com/docs-cn/op-guide/generate-self-signed-certificates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/generate-self-signed-certificates/</guid>
      <description>生成自签名证书 概述 本文档提供使用 cfssl 生成自签名证书的示例。
假设实例集群拓扑如下：
   Name Host IP Services     node1 172.16.10.1 PD1, TiDB1   node2 172.16.10.2 PD2, TiDB2   node3 172.16.10.3 PD3   node4 172.16.10.4 TiKV1   node5 172.16.10.5 TiKV2   node6 172.16.10.6 TiKV3    下载 cfssl 假设使用 x86_64 Linux 主机：
mkdir ~/bin curl -s -L -o ~/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 curl -s -L -o ~/bin/cfssljson https://pkg.</description>
    </item>
    
    <item>
      <title>用户自定义变量</title>
      <link>https://pingcap.com/docs-cn/sql/user-defined-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/user-defined-variables/</guid>
      <description>用户自定义变量 用户自定义变量格式为 @var_name。var_name 目前只支持字母，数字，_$组成。用户自定义变量是大小写不敏感的。
用户自定义变量是跟 session 绑定的，也就是说只有当前连接可以看见设置的用户变量，其他客户端连接无法查看到。
用 SET 语句可以设置用户自定义变量：
SET @var_name = expr [, @var_name = expr] ... 或 SET @var_name := expr 对于 SET 语句，赋值操作符可以是 = 也可以是 :=
例：
mysql&amp;gt; SET @a1=1, @a2=2, @a3:=4; mysql&amp;gt; SELECT @a1, @a2, @t3, @a4 := @a1+@a2+@a3; +------+------+------+--------------------+ | @a1 | @a2 | @a3 | @a4 := @a1+@a2+@a3 | +------+------+------+--------------------+ | 1 | 2 | 4 | 7 | +------+------+------+--------------------+ 如果设置用户变量用了 HEX 或者 BIT 值，TiDB会把它当成二进制字符串。如果你要将其设置成数字，那么需要手动加上 CAST转换: CAST(.</description>
    </item>
    
    <item>
      <title>离线 TiDB Ansible 部署方案</title>
      <link>https://pingcap.com/docs-cn/op-guide/offline-ansible-deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/offline-ansible-deployment/</guid>
      <description>离线 TiDB Ansible 部署方案 准备机器  下载机一台
 该机器需开放外网访问，用于下载 TiDB-Ansible、TiDB 及相关软件安装包。 推荐安装 CentOS 7.3 及以上版本 Linux 操作系统。  部署目标机器若干及部署中控机一台
 系统要求及配置参考准备机器。 可以无法访问外网。   在中控机上安装系统依赖包  下载系统依赖离线安装包，上传至中控机。该离线包仅支持 CentOS 7 系统，包含 pip 及 sshpass。
 # tar -xzvf ansible-system-rpms.el7.tar.gz # cd ansible-system-rpms.el7 # chmod u+x install_ansible_system_rpms.sh # ./install_ansible_system_rpms.sh 安装完成后，可通过 pip -V 验证 pip 是否安装成功：
# pip -V  pip 8.1.2 from /usr/lib/python2.7/site-packages (python 2.7)  如果你的系统已安装 pip，请确认版本 &amp;gt;= 8.1.2，否则离线安装 ansible 及其依赖时，会有兼容问题。</description>
    </item>
    
    <item>
      <title>精度数学</title>
      <link>https://pingcap.com/docs-cn/sql/precision-math/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/precision-math/</guid>
      <description>精度数学 TiDB 中精度数学计算与 MySQL 中基本一致, 详情请参见: Precision Math.
 数值类型 DECIMAL 数据类型的特性  数值类型 精确数值运算的范围包括精确值数据类型(整型和 DECIMAL 类型), 以及精确值数字字面量. 近似值数据类型和近似值数字字面量被作为浮点数来处理.
精确值数字字面量包含整数部分或小数部分, 或二者都包含. 精确值数字字面量可以包含符号位. 例如: 1, .2, 3.4, -5, -6.78, +9.10.
近似值数字字面量以一个包含尾数和指数的科学计数法表示(基数为 10). 其中尾数和指数可以分别或同时带有符号位. 例如: 1.2E3, 1.2E-3, -1.2E3, -1.2E-3.
两个看起来相似的数字可能会被以不同的方式进行处理. 例如, 2.34 是精确值(定点数), 而 2.3E0 是近似值(浮点数).
DECIMAL 数据类型是定点数类型, 其运算是精确计算. FLOAT 和 DOUBLE 数据类型是浮点类型, 其运算是近似计算.
DECIMAL 数据类型的特性 本节讨论 DECIMAL 数据类型的特性, 主要涉及以下几点:
 最大位数 存储格式 存储要求  DECIMAL 列的声明语法为 DECIMAL(M, D). 其中参数值意义及其范围如下:
 M 表示最大的数字位数 (精度).</description>
    </item>
    
    <item>
      <title>系统变量</title>
      <link>https://pingcap.com/docs-cn/sql/variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/variable/</guid>
      <description>系统变量 MySQL 系统变量 (System Variables) 是一些系统参数，用于调整数据库运行时的行为，根据变量的作用范围分为全局范围有效（Global Scope）以及会话级别有效（Session Scope）。TiDB 支持 MySQL5.7 的所有系统变量，大部分变量仅仅是为了兼容性而支持，不会影响运行时行为。
设置系统变量 通过 SET 语句可以修改系统变量的值。进行修改时，还要考虑变量可修改的范围，不是所有的变量都能在全局/会话范围内进行修改。具体的可修改范围参考 MySQL 动态变量文档。
全局范围值  在变量名前加 GLOBAL 关键词或者是使用 @@global. 作为修饰符:  SET GLOBAL autocommit = 1; SET @@global.autocommit = 1; 会话范围值  在变量名前加 SESSION 关键词或者是使用 @@session. 作为修饰符，或者是不加任何修饰符:  SET SESSION autocommit = 1; SET @@session.autocommit = 1; SET @@autocommit = 1;  LOCAL 以及 @@local. 是 SESSION 以及 @@session. 的同义词  TiDB 支持的 MySQL 系统变量 下列系统变量是 TiDB 真正支持并且行为和 MySQL 一致：</description>
    </item>
    
    <item>
      <title>统计信息简介</title>
      <link>https://pingcap.com/docs-cn/sql/statistics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/statistics/</guid>
      <description>统计信息简介 TiDB 优化器会根据统计信息来选择最优的执行计划。统计信息收集了表级别和列级别的信息，表的统计信息包括总行数，以及修改的行数。列的统计信息包括不同值的数量，NULL 的数量，直方图，以及该列的 Count-Min Sketch 信息。
统计信息的收集 手动收集 你可以通过执行 ANALYZE 语句来收集统计信息。
语法：
ANALYZE TABLE TableNameList &amp;gt; 该语句会收集 TableNameList 中所有表的统计信息。 ANALYZE TABLE TableName INDEX [IndexNameList] &amp;gt; 该语句会收集 TableName 中所有的 IndexNameList 中的索引列的统计信息。 &amp;gt; IndexNameList 为空时会收集所有索引列的统计信息。 自动更新 在发生增加，删除以及修改语句时，TiDB 会自动更新表的总行数以及修改的行数。这些信息会定期持久化下来， 更新的周期是 5 * stats-lease, stats-lease 的默认值是 3s，如果将其指定为 0，那么将不会自动更新。
当修改的行数与总行数的比值大于 auto-analyze-ratio 时，TiDB 会自动发起 Analyze 语句。auto-analyze-ratio 可通过配置文件修改，其默认值是 0，即不开启此功能。
在查询语句执行时，TiDB 会以 feedback-probability 的概率收集反馈信息，并将其用于更新直方图和 Count-Min Sketch。feedback-probability 可通过配置文件修改，其默认值是 0。
控制 ANALYZE 并发度 执行 ANALYZE 语句的时候，你可以通过一些参数来调整并发度，以控制对系统的影响。
tidb_build_stats_concurrency 目前 ANALYZE 执行的时候会被切分成一个个小的任务，每个任务只负责某一个列或者索引。tidb_build_stats_concurrency 可以控制同时执行的任务的数量，其默认值是 4。</description>
    </item>
    
    <item>
      <title>表达式求值的类型转换</title>
      <link>https://pingcap.com/docs-cn/sql/type-conversion-in-expression-evaluation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/type-conversion-in-expression-evaluation/</guid>
      <description>表达式求值的类型转换 TiDB 中表达式求值的类型转换与 MySQL 基本一致，详情参见 MySQL 表达式求值的类型转换。</description>
    </item>
    
    <item>
      <title>表达式语法</title>
      <link>https://pingcap.com/docs-cn/sql/expression-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/expression-syntax/</guid>
      <description>表达式语法 (Expression Syntax) 在 TiDB 中，以下规则是表达式的语法，你可以在 parser/parser.y 中找到定义。TiDB 的语法解析是基于 yacc 的。
Expression: singleAtIdentifier assignmentEq Expression | Expression logOr Expression | Expression &amp;#34;XOR&amp;#34; Expression | Expression logAnd Expression | &amp;#34;NOT&amp;#34; Expression | Factor IsOrNotOp trueKwd | Factor IsOrNotOp falseKwd | Factor IsOrNotOp &amp;#34;UNKNOWN&amp;#34; | Factor Factor: Factor IsOrNotOp &amp;#34;NULL&amp;#34; | Factor CompareOp PredicateExpr | Factor CompareOp singleAtIdentifier assignmentEq PredicateExpr | Factor CompareOp AnyOrAll SubSelect | PredicateExpr PredicateExpr: PrimaryFactor InOrNotOp &amp;#39;(&amp;#39; ExpressionList &amp;#39;)&amp;#39; | PrimaryFactor InOrNotOp SubSelect | PrimaryFactor BetweenOrNotOp PrimaryFactor &amp;#34;AND&amp;#34; PredicateExpr | PrimaryFactor LikeOrNotOp PrimaryExpression LikeEscapeOpt | PrimaryFactor RegexpOrNotOp PrimaryExpression | PrimaryFactor PrimaryFactor: PrimaryFactor &amp;#39;|&amp;#39; PrimaryFactor | PrimaryFactor &amp;#39;&amp;amp;&amp;#39; PrimaryFactor | PrimaryFactor &amp;#34;&amp;lt;&amp;lt;&amp;#34; PrimaryFactor | PrimaryFactor &amp;#34;&amp;gt;&amp;gt;&amp;#34; PrimaryFactor | PrimaryFactor &amp;#39;+&amp;#39; PrimaryFactor | PrimaryFactor &amp;#39;-&amp;#39; PrimaryFactor | PrimaryFactor &amp;#39;*&amp;#39; PrimaryFactor | PrimaryFactor &amp;#39;/&amp;#39; PrimaryFactor | PrimaryFactor &amp;#39;%&amp;#39; PrimaryFactor | PrimaryFactor &amp;#34;DIV&amp;#34; PrimaryFactor | PrimaryFactor &amp;#34;MOD&amp;#34; PrimaryFactor | PrimaryFactor &amp;#39;^&amp;#39; PrimaryFactor | PrimaryExpression PrimaryExpression: Operand | FunctionCallKeyword | FunctionCallNonKeyword | FunctionCallAgg | FunctionCallGeneric | Identifier jss stringLit | Identifier juss stringLit | SubSelect | &amp;#39;!</description>
    </item>
    
    <item>
      <title>跨机房部署方案</title>
      <link>https://pingcap.com/docs-cn/op-guide/location-awareness/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/location-awareness/</guid>
      <description>跨机房部署方案 概述 PD 能够根据 TiKV 集群的拓扑结构进行调度，使得 TiKV 的容灾能力最大化。
阅读本章前，请先确保阅读 Ansible 部署方案 和 Docker 部署方案。
TiKV 上报拓扑信息 可以通过 TiKV 的启动参数或者配置文件来让 TiKV 上报拓扑信息给 PD。
假设拓扑结构分为三级：zone &amp;gt; rack &amp;gt; host，可以通过 labels 来指定这些信息。
启动参数：
tikv-server --labels zone=&amp;lt;zone&amp;gt;,rack=&amp;lt;rack&amp;gt;,host=&amp;lt;host&amp;gt; 配置文件：
[server] labels = &amp;#34;zone=&amp;lt;zone&amp;gt;,rack=&amp;lt;rack&amp;gt;,host=&amp;lt;host&amp;gt;&amp;#34; PD 理解 TiKV 拓扑结构 可以通过 PD 的配置文件让 PD 理解 TiKV 集群的拓扑结构。
[replication] max-replicas = 3 location-labels = [&amp;#34;zone&amp;#34;, &amp;#34;rack&amp;#34;, &amp;#34;host&amp;#34;] 其中 location-labels 需要与 TiKV 的 labels 名字对应，这样 PD 才能知道这些 labels 代表了 TiKV 的拓扑结构。</description>
    </item>
    
    <item>
      <title>连接器和 API</title>
      <link>https://pingcap.com/docs-cn/sql/connection-and-APIs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/connection-and-APIs/</guid>
      <description>连接器和 API 数据库连接器为客户端提供了连接数据库服务端的方式，APIs 提供了使用 MySQL 协议和资源的底层接口。无论是连接器还是 API，都可以用来在不同的语言和环境内连接服务器并执行 sql 语句，包括 odbc、java(jdbc)、Perl、Python、PHP、Ruby 和 C。
TiDB 兼容 MySQL(5.6、5.7) 的所有连接器和 API，包括：
 MySQL Connector/C MySQL Connector/C++ MySQL Connector/J MySQL Connector/Net MySQL Connector/ODBC MySQL Connector/Python MySQL C API MySQL PHP API MySQL Perl API MySQL Python API MySQL Ruby APIs MySQL Tcl API MySQL Eiffel Wrapper Mysql Go API  使用 MySQL 连接器连接 TiDB Oracle 官方提供了以下 API，TiDB 可以兼容所有这些 API。
 MySQL Connector/C：C 语言的客户端库，是 libmysqlclient 的替代品 MySQL Connector/C++：C++ 语言的客户端库 MySQL Connector/J：Java 语言的客户端库，基于标准 JDBC 接口 MySQL Connector/Net：.</description>
    </item>
    
    <item>
      <title>重要监控指标详解</title>
      <link>https://pingcap.com/docs-cn/op-guide/dashboard-overview-info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/op-guide/dashboard-overview-info/</guid>
      <description> 重要监控指标详解 使用 Ansible 部署 TiDB 集群时，一键部署监控系统 (Prometheus/Grafana)，监控架构请看 TiDB 监控框架概述。
目前 Grafana Dashboard 整体分为 PD、TiDB、TiKV、Node_exporter、Overview 等。
对于日常运维，我们单独挑选出重要的 Metrics 放在 Overview 页面，方便日常运维人员观察集群组件 (PD, TiDB, TiKV) 使用状态以及集群使用状态。
以下为 Overview Dashboard 监控说明：
说明  Services Port Status  Services Online：各服务在线节点数量 Services Offline：各服务 Down 掉节点数量  PD  Storage Capacity：TiDB 集群总可用数据库空间大小 Current Storage Size：TiDB 集群目前已用数据库空间大小 Number of Regions：当前集群的 Region 总量 Leader Balance Ratio：Leader 数量最多和最少节点相差的百分比，一般小于 5%，节点重启时会有比较大的波动 Region Balance Ratio：Region 数量最多和最少节点相差的百分比，一般小于 5%，新增/下线节点时相差比较大 Store Status：集群 TiKV 节点的状态  Up Stores：正常运行的 TiKV 节点数量 Disconnect Stores：短时间内通信异常的 TiKV 节点数量 LowSpace Stores：剩余可用空间小于 80% 的 TiKV 节点数量 Down Stores：停止工作的 TiKV 节点数量，如果大于 0，说明有节点不正常 Offline Stores：正在下线的 TiKV 节点数量（正在下线的 TiKV 节点还在提供服务） Tombstone Stores：下线成功的 TiKV 节点数量  99% completed_cmds_duration_seconds：单位时间内，99% 的 pd-server 请求执行时间小于监控曲线的值，一般 &amp;lt;= 5ms handle_requests_duration_seconds：PD 发送请求的网络耗时  TiDB  Statement OPS：SQL 执行数量统计（包含 select、insert、update 等） Duration：SQL 执行的时间 QPS By Instance：每个 TiDB 上的 QPS Failed Query OPM：失败 SQL 的统计，例如语法错误、主键冲突等 Connection count：每个 TiDB 的连接数 Heap Memory Usage：每个 TiDB 使用的堆内存大小 Transaction OPS：事务执行数量统计 Transaction Duration：事务执行的时间 KV Cmd OPS：KV 命令执行数量统计 KV Cmd Duration 99：KV 命令执行的时间 PD TSO OPS：TiDB 从 PD 获取 TSO 的数量 PD TSO Wait Duration：TiDB 从 PD 获取 TS 的时间 TiClient Region Error OPS：TiKV 返回 Region 相关错误信息的数量 Lock Resolve OPS：事务冲突相关的数量 Load Schema Duration：TiDB 从 TiKV 获取 Schema 的时间 KV Backoff OPS：TiKV 返回错误信息的数量（事务冲突等）  TiKV  leader：各个 TiKV 节点上 Leader 的数量分布 region：各个 TiKV 节点上 Region 的数量分布 CPU：各个 TiKV 节点的 CPU 使用率 Memory：各个 TiKV 节点的内存使用量 store size：各个 TiKV 节点存储的数据量 cf size：集群不同 CF 存储的数据量 channel full：正常情况显示 No data，如果有了监控值，说明对应 TiKV 节点的消息处理不过来了 server report failures：正常情况显示 No data，如果出现了 Unreachable，说明 TiKV 之间通信有问题 scheduler pending commands：写入堆积的数量，偶尔出现峰值属于正常现象 coprocessor pending requests：正常情况监控为 0 或者数量很少 coprocessor executor count：不同类型的查询操作数量 coprocessor request duration：TiKV 中查询消耗的时间 raft store CPU：raftstore 线程的 CPU 使用率，目前为单线程，超过 80% 说明使用率很高 Coprocessor CPU：TiKV 查询线程的 CPU 使用率，和业务相关，复杂查询会使用大量的 CPU 资源  System Info  Vcores：CPU 核心数量 Memory：内存总大小 CPU Usage：CPU 使用率，最大为 100% Load [1m]：1 分钟的负载情况 Memory Available：剩余内存大小 Network Traffic：网卡流量统计 TCP Retrans：网络监控，TCP 相关信息统计 IO Util：磁盘使用率，最高为 100%，一般到 80% - 90% 就需要考虑加节点   图例 </description>
    </item>
    
    <item>
      <title>错误码与故障诊断</title>
      <link>https://pingcap.com/docs-cn/sql/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/sql/error/</guid>
      <description>错误码与故障诊断 本篇文档描述在使用 TiDB 过程中会遇到的问题以及解决方法。
错误码 TiDB 兼容 MySQL 的错误码，在大多数情况下，返回和 MySQL 一样的错误码。另外还有一些特有的错误码：
   错误码 说明     8001 请求使用的内存超过 TiDB 内存使用的阈值限制   8002 带有 SELECT FOR UPDATE 语句的事务，在遇到写入冲突时，为保证一致性无法进行重试，事务将进行回滚并返回该错误   8003 ADMIN CHECK TABLE 命令在遇到行数据跟索引不一致的时候返回该错误   9001 请求 PD 超时，请检查 PD Server 状态/监控/日志以及 TiDB Server 与 PD Server 之间的网络   9002 请求 TiKV 超时，请检查 TiKV Server 状态/监控/日志以及 TiDB Server 与 TiKV Server 之间的网络   9003 TiKV 操作繁忙，一般出现在数据库负载比较高时，请检查 TiKV Server 状态/监控/日志   9004 当数据库上承载的业务存在大量的事务冲突时，会遇到这种错误，请检查业务代码   9005 某个 Raft Group 不可用，如副本数目不足，出现在 TiKV 比较繁忙或者是 TiKV 节点停机的时候，请检查 TiKV Server 状态/监控/日志   9006 GC Life Time 间隔时间过短，长事务本应读到的数据可能被清理了,应增加GC Life Time   9500 单个事务过大，原因及解决方法请参考这里    故障诊断 参见故障诊断文档以及 FAQ。</description>
    </item>
    
  </channel>
</rss>